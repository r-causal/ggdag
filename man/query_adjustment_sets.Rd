% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_functions.R
\name{query_adjustment_sets}
\alias{query_adjustment_sets}
\title{Query Adjustment Sets}
\usage{
query_adjustment_sets(
  .tdy_dag,
  exposure = NULL,
  outcome = NULL,
  type = c("minimal", "canonical", "all"),
  effect = c("total", "direct"),
  max.results = Inf
)
}
\arguments{
\item{.tdy_dag}{A tidy DAG object.}

\item{exposure}{A character vector of exposure variable names. If NULL,
uses the exposure defined in the DAG.}

\item{outcome}{A character vector of outcome variable names. If NULL,
uses the outcome defined in the DAG.}

\item{type}{Character string specifying the type of adjustment sets to find.
Options are "minimal" (default), "canonical", or "all".}

\item{effect}{Character string specifying the effect type. Options are
"total" (default) or "direct".}

\item{max.results}{Maximum number of adjustment sets to return. Default is Inf.}
}
\value{
A tibble with columns:
\itemize{
\item \code{set_id}: Integer identifier for each adjustment set
\item \code{type}: Type of adjustment set (minimal, canonical, or all)
\item \code{effect}: Effect type (total or direct)
\item \code{set}: String representation of the adjustment set (e.g., "\{a, b, c\}")
\item \code{variables}: List column containing the variables in each set
}
}
\description{
Find adjustment sets that close backdoor paths between exposure and outcome.
Unlike \code{dag_adjustment_sets()}, this function returns a tibble with the
adjustment sets as list columns rather than a tidy_dagitty object.
}
\examples{
library(ggdag)
dag <- dagify(
  y ~ x + z,
  x ~ z,
  exposure = "x",
  outcome = "y"
)

query_adjustment_sets(dag)
}
