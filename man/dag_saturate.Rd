% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/saturate_and_prune.R
\name{dag_saturate}
\alias{dag_saturate}
\alias{dag_prune}
\title{Saturate or prune an existing DAG}
\usage{
dag_saturate(
  .tdy_dag,
  use_existing_coords = FALSE,
  layout = "time_ordered",
  seed = NULL,
  ...
)

dag_prune(.tdy_dag, edges)
}
\arguments{
\item{.tdy_dag}{A tidy DAG object.}

\item{use_existing_coords}{Logical, indicating whether to use existing node
coordinates.}

\item{layout}{a layout available in \code{ggraph}. See \code{\link[ggraph:ggraph]{ggraph::create_layout()}}
for details. Alternatively, \code{"time_ordered"} will use
\code{time_ordered_coords()} to algorithmically sort the graph by time.}

\item{seed}{a numeric seed for reproducible layout generation}

\item{...}{optional arguments passed to \code{ggraph::create_layout()}}

\item{edges}{A named character vector where the name is the starting node and
the value is the end node, e.g. \code{c("x" = "y")} will remove the edge going
from \code{x} to \code{y}.}
}
\value{
A \code{tidy_dagitty} object
}
\description{
\code{dag_saturate()} takes a tidy DAG object and, optionally using existing
coordinates, saturates the DAG based on time ordering of the nodes. To create
a saturated DAG from scratch, see \code{\link[=as_tidy_dagitty.list]{as_tidy_dagitty.list()}}. \code{dag_prune()}
takes an existing DAG and removes edges. This is most useful when used
together with saturated DAG.
}
\examples{
# Example usage:
dag <- dagify(y ~ x, x ~ z)
saturated_dag <- dag_saturate(dag)

saturated_dag \%>\%
  ggdag(edge_type = "arc")

saturated_dag \%>\%
  dag_prune(c("x" = "y")) \%>\%
  ggdag(edge_type = "arc")
}
\seealso{
\code{\link[=as_tidy_dagitty.list]{as_tidy_dagitty.list()}}
}
