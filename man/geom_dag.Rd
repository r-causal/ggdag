% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_dag.R
\name{geom_dag}
\alias{geom_dag}
\title{Add common DAG layers to a ggplot}
\usage{
geom_dag(
  data = NULL,
  size = 1,
  edge_type = c("link_arc", "link", "arc", "diagonal"),
  node_size = 16,
  text_size = 3.88,
  label_size = text_size,
  text_col = "white",
  label_col = "black",
  edge_width = 0.6,
  edge_cap = 8,
  arrow_length = 5,
  use_edges = TRUE,
  use_nodes = TRUE,
  use_stylized = FALSE,
  use_text = TRUE,
  use_labels = FALSE,
  unified_legend = TRUE,
  key_glyph = NULL,
  label = NULL,
  text = NULL,
  node = deprecated(),
  stylized = deprecated()
)
}
\arguments{
\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{size}{A numeric value scaling the size of all elements in the DAG. This
allows you to change the scale of the DAG without changing the proportions.}

\item{edge_type}{The type of edge, one of "link_arc", "link", "arc",
"diagonal".}

\item{node_size}{The size of the nodes.}

\item{text_size}{The size of the text.}

\item{label_size}{The size of the labels.}

\item{text_col}{The color of the text.}

\item{label_col}{The color of the labels.}

\item{edge_width}{The width of the edges.}

\item{edge_cap}{The size of edge caps (the distance between the arrowheads
and the node borders).}

\item{arrow_length}{The length of arrows on edges.}

\item{use_edges}{A logical value. Include a \verb{geom_dag_edges*()} function? If
\code{TRUE}, which is determined by \code{edge_type}.}

\item{use_nodes}{A logical value. Include \code{geom_dag_point()}?}

\item{use_stylized}{A logical value. Include \code{geom_dag_node()}?}

\item{use_text}{A logical value. Include \code{geom_dag_text()}?}

\item{use_labels}{A logical value. Include \code{geom_dag_label_repel()}?}

\item{unified_legend}{A logical value. When \code{TRUE} and both \code{use_edges} and
\code{use_nodes} are \code{TRUE}, creates a unified legend entry showing both nodes
and edges in a single key, and hides the separate edge legend. This creates
cleaner, more compact legends. Default is \code{TRUE}.}

\item{key_glyph}{A function to use for drawing the legend key glyph for nodes.
If \code{NULL} (the default), the glyph is chosen automatically based on the
\code{unified_legend} setting. When provided, this overrides the automatic
selection. Common options include \code{draw_key_dag_point},
\code{draw_key_dag_combined}, and \code{draw_key_dag_collider}.}

\item{label}{The bare name of a column to use for \code{geom_dag_label_repel()}.
If \code{use_labels = TRUE}, the default is to use \code{label}.}

\item{text}{The bare name of a column to use for \code{geom_dag_text()}. If
\code{use_text = TRUE}, the default is to use \code{name}.}

\item{node}{Deprecated.}

\item{stylized}{Deprecated.}
}
\value{
A list of ggplot2 layer elements
}
\description{
\code{geom_dag()} is a helper function that adds common DAG layers to a ggplot.
The purpose of \code{geom_dag()} is to simplify making custom DAGs. Most custom
DAGs need the same basic layers, and so this function greatly reduces typing.
It is not a true geom in that it adds many types of geoms to the plot (by
default, edges, nodes, and text). While the underlying layers, all available
in ggdag, are true geoms, we usually need a consistent set of layers to make
a DAG. \code{geom_dag()} provides this. Because \code{geom_dag()} is not a true geom,
you'll find that it is awkward for sophisticated customization. When you hit
that point, you should use the underlying geoms directly.
}
\examples{
# Basic usage with ggdag
library(ggplot2)
dag <- dagify(y ~ x, z ~ y)
ggplot(dag, aes_dag()) +
  geom_dag()
ggplot(dag, aes_dag()) +
  geom_dag(size = 1.5)
ggplot(dag, aes_dag()) +
  geom_dag(size = 1.5, text_size = 8)

}
