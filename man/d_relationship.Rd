% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/drelationship.R
\name{Assess d-separation between variables}
\alias{Assess d-separation between variables}
\alias{node_dconnected}
\alias{node_dseparated}
\alias{node_drelationship}
\alias{ggdag_drelationship}
\alias{ggdag_dseparated}
\alias{ggdag_dconnected}
\title{D-relationship between variables}
\usage{
node_dconnected(
  .tdy_dag,
  from = NULL,
  to = NULL,
  controlling_for = NULL,
  as_factor = TRUE,
  ...
)

node_dseparated(
  .tdy_dag,
  from = NULL,
  to = NULL,
  controlling_for = NULL,
  as_factor = TRUE
)

node_drelationship(
  .tdy_dag,
  from = NULL,
  to = NULL,
  controlling_for = NULL,
  as_factor = TRUE
)

ggdag_drelationship(
  .tdy_dag,
  from = NULL,
  to = NULL,
  controlling_for = NULL,
  ...,
  edge_type = "link_arc",
  size = 1,
  node_size = 16,
  text_size = 3.88,
  label_size = text_size,
  text_col = "white",
  label_col = "black",
  edge_width = 0.6,
  edge_cap = 10,
  arrow_length = 5,
  use_edges = TRUE,
  use_nodes = TRUE,
  use_stylized = FALSE,
  use_text = TRUE,
  use_labels = FALSE,
  unified_legend = TRUE,
  key_glyph = draw_key_dag_point,
  label = NULL,
  text = NULL,
  node = deprecated(),
  stylized = deprecated(),
  collider_lines = TRUE
)

ggdag_dseparated(
  .tdy_dag,
  from = NULL,
  to = NULL,
  controlling_for = NULL,
  ...,
  edge_type = "link_arc",
  size = 1,
  node_size = 16,
  text_size = 3.88,
  label_size = text_size,
  text_col = "white",
  label_col = "black",
  edge_width = 0.6,
  edge_cap = 10,
  arrow_length = 5,
  use_edges = TRUE,
  use_nodes = TRUE,
  use_stylized = FALSE,
  use_text = TRUE,
  use_labels = FALSE,
  unified_legend = TRUE,
  key_glyph = draw_key_dag_point,
  label = NULL,
  text = NULL,
  node = deprecated(),
  stylized = deprecated(),
  collider_lines = TRUE
)

ggdag_dconnected(
  .tdy_dag,
  from = NULL,
  to = NULL,
  controlling_for = NULL,
  ...,
  edge_type = "link_arc",
  size = 1,
  node_size = 16,
  text_size = 3.88,
  label_size = text_size,
  text_col = "white",
  label_col = "black",
  edge_width = 0.6,
  edge_cap = 10,
  arrow_length = 5,
  use_edges = TRUE,
  use_nodes = TRUE,
  use_stylized = FALSE,
  use_text = TRUE,
  use_labels = FALSE,
  unified_legend = TRUE,
  key_glyph = draw_key_dag_point,
  label = NULL,
  text = NULL,
  node = deprecated(),
  stylized = deprecated(),
  collider_lines = TRUE
)
}
\arguments{
\item{.tdy_dag}{A \code{tidy_dagitty} or \code{dagitty} object}

\item{from}{A character vector with starting node name(s), or \code{NULL}. If
\code{NULL}, checks DAG for exposure variable.}

\item{to}{A character vector with ending node name(s), or \code{NULL}. If \code{NULL},
checks DAG for outcome variable.}

\item{controlling_for}{A set of variables to control for. This can be a
character vector of variable names, a list of the form \code{list(c(...))}, or
\code{NULL}. When \code{NULL}, no control is applied. Default is \code{NULL}.}

\item{as_factor}{Logical. Should the column be a factor?}

\item{...}{additional arguments passed to \code{tidy_dagitty()}}

\item{edge_type}{The type of edge, one of "link_arc", "link", "arc",
"diagonal".}

\item{size}{A numeric value scaling the size of all elements in the DAG. This
allows you to change the scale of the DAG without changing the proportions.}

\item{node_size}{The size of the nodes.}

\item{text_size}{The size of the text.}

\item{label_size}{The size of the labels.}

\item{text_col}{The color of the text.}

\item{label_col}{The color of the labels.}

\item{edge_width}{The width of the edges.}

\item{edge_cap}{The size of edge caps (the distance between the arrowheads
and the node borders).}

\item{arrow_length}{The length of arrows on edges.}

\item{use_edges}{A logical value. Include a \verb{geom_dag_edges*()} function? If
\code{TRUE}, which is determined by \code{edge_type}.}

\item{use_nodes}{A logical value. Include \code{geom_dag_point()}?}

\item{use_stylized}{A logical value. Include \code{geom_dag_node()}?}

\item{use_text}{A logical value. Include \code{geom_dag_text()}?}

\item{use_labels}{A logical value. Include a label geom? The specific geom
used is controlled by \code{label_geom}.}

\item{unified_legend}{A logical value. When \code{TRUE} and both \code{use_edges} and
\code{use_nodes} are \code{TRUE}, creates a unified legend entry showing both nodes
and edges in a single key, and hides the separate edge legend. This creates
cleaner, more compact legends. Default is \code{TRUE}.}

\item{key_glyph}{A function to use for drawing the legend key glyph for nodes.
If \code{NULL} (the default), the glyph is chosen automatically based on the
\code{unified_legend} setting. When provided, this overrides the automatic
selection. Common options include \code{draw_key_dag_point},
\code{draw_key_dag_combined}, and \code{draw_key_dag_collider}.}

\item{label}{The bare name of a column to use for labels.
If \code{use_labels = TRUE}, the default is to use \code{label}.}

\item{text}{The bare name of a column to use for \code{geom_dag_text()}. If
\code{use_text = TRUE}, the default is to use \code{name}.}

\item{node}{Deprecated.}

\item{stylized}{Deprecated.}

\item{collider_lines}{Logical. Should paths opened by conditioning on
colliders be shown?}
}
\value{
a \code{tidy_dagitty} with a \code{d_relationship} column for
variable D relationship or a \code{ggplot}
}
\description{
D-separation is a key concept in causal structural models. Variables are
d-separated if there are no open paths between them. The \verb{node_d*()}
functions label variables as d-connected or d-separated. The
\verb{ggdag_d*()} functions plot the results. The \verb{*_dconnected()},
\verb{*_dseparated()}, and \verb{*_drelationship()} functions essentially
produce the same output and are just different ways of thinking about the
relationship. See \code{\link[dagitty:dconnected]{dagitty::dseparated()}} for details.
}
\examples{
library(ggplot2)
dag <- dagify(m ~ x + y)
dag |> ggdag_drelationship("x", "y")
dag |> ggdag_drelationship("x", "y", controlling_for = "m")

dag |>
  node_dseparated("x", "y") |>
  ggplot(aes(x = x, y = y, xend = xend, yend = yend, shape = adjusted,
             col = d_relationship)) +
  geom_dag_edges() +
  geom_dag_collider_edges() +
  geom_dag_node() +
  geom_dag_text(col = "white") +
  theme_dag() +
  scale_adjusted(include_color = FALSE)

dag |>
  node_dconnected("x", "y", controlling_for = "m") |>
  ggplot(aes(x = x, y = y, xend = xend, yend = yend, shape = adjusted,
             col = d_relationship)) +
  geom_dag_edges() +
  geom_dag_collider_edges() +
  geom_dag_node() +
  geom_dag_text(col = "white") +
  theme_dag() +
  scale_adjusted(include_color = FALSE)

dagify(m ~ x + y, m_jr ~ m) |>
  tidy_dagitty(layout = "nicely") |>
  node_dconnected("x", "y", controlling_for = "m_jr") |>
  ggplot(aes(x = x, y = y, xend = xend, yend = yend, shape = adjusted,
             col = d_relationship)) +
  geom_dag_edges() +
  geom_dag_collider_edges() +
  geom_dag_node() +
  geom_dag_text(col = "white") +
  theme_dag() +
  scale_adjusted(include_color = FALSE)
}
