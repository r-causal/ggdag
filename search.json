[{"path":"https://r-causal.github.io/ggdag/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018 Malcolm Barrett Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://r-causal.github.io/ggdag/articles/bias-structures.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Common Structures of Bias","text":"addition helping identify causal effects, consistency directed acyclic graphs (DAGs) useful thinking different forms bias. Often, many seemingly unrelated types bias take form DAG. Methodological issues study often reduce problem 1) adequately blocking back-door path 2) selecting variable turns collider.","code":""},{"path":"https://r-causal.github.io/ggdag/articles/bias-structures.html","id":"confounders-and-confounding","dir":"Articles","previous_headings":"","what":"Confounders and confounding","title":"Common Structures of Bias","text":"Classical confounding simple. confounder associated exposure outcome. Let’s consider classic example: coffee, smoking, cancer. Smoking risk factor number cancers, people drink coffee likely smoke. Coffee doesn’t actually cause lung cancer, d-connected smoking, appear associated:  think , DAG incorrect. Smoking doesn’t cause coffee drinking; something else, say predilection towards addictive substances, causes person smoke drink coffee. Let’s say psychometric tool accurately measures addictive behavior, can control . Now DAG looks like :  one confounder, addictive behavior smoking? one needs controlled block path:  Focusing individual confounders, rather confounding pathways, common error thinking adjusting estimates. concerned blocking confounding pathways including particular variable along pathways. (’s worth noting, though, say need one variable block path, assumes measuring modeling variable correctly. , example, measurement error, controlling variable may still leave residual confounding, necessitating subtle level control variables pathway; see section measurement error . Moreover, ’s important know expect block path average; normal sampling issues, e.g. sample size, still come play.)","code":"confounder_triangle(x = \"Coffee\", y = \"Lung Cancer\", z = \"Smoking\") |>   ggdag_dconnected(text = FALSE, use_labels = \"label\") coffee_dag <- dagify(   cancer ~ smoking,   smoking ~ addictive,   coffee ~ addictive,   exposure = \"coffee\",   outcome = \"cancer\",   labels = c(     \"coffee\" = \"Coffee\",     \"cancer\" = \"Lung Cancer\",     \"smoking\" = \"Smoking\",     \"addictive\" = \"Addictive \\nBehavior\"   ) ) |>   tidy_dagitty(layout = \"tree\")  ggdag(coffee_dag, text = FALSE, use_labels = \"label\") ggdag_adjustment_set(coffee_dag, text = FALSE, use_labels = \"label\", shadow = TRUE)"},{"path":"https://r-causal.github.io/ggdag/articles/bias-structures.html","id":"colliders-m-bias-and-butterfly-bias","dir":"Articles","previous_headings":"","what":"Colliders, M-bias, and butterfly bias","title":"Common Structures of Bias","text":"Stratifying collider major culprit systematic bias. Controlling collider–node two arrow heads meet–induces association parents, confounding can flow:  , example fairly simple easy deal : m child x y just shouldn’t adjusted . can get complicated, though, m something seems like confounder represents variable contributes whether person enters study. Often takes form M-shaped bias, M-bias. Let’s consider example Modern Epidemiology: association education diabetes. Let’s assume lack education isn’t direct cause diabetes. putting together analysis, ask: adjust participant’s mother’s history diabetes? ’s linked education via income participant’s diabetes status via genetic risk, looks like :  classical confounding perspective, seems like mother’s diabetes status might confounder: ’s associated exposure outcome, ’s descendant either. However, association outcome exposure direct either; ’s due confounding genetic risk childhood income, respectively. Drawing DAG makes clear mother’s diabetes status collider, adjusting induce association genetic risk childhood income, thus opening back-door path education diabetes status:  , relatively easy–just don’t control collider. study design already stratifies m? Let’s consider example m represents surgery. Let’s say conducting study involving participants surgery due back pain. suspect people ready commit physical therapy changes daily life greater decrease pain year aren’t. ’ve developed psychometric tool measures readiness surgery, going look association readiness change pain. readiness scale depends underlying latent variable true readiness, measuring error. Change pain depends baseline pain. underlying readiness baseline pain also predictive whether someone surgery. definition, selecting surgical status: feel ’s unethical withhold irresponsible force participants surgery. , can’t know people didn’t surgery react. Surgical status inherently stratified , ’re looking people (note , ’m going show paths opened adjusting collider, default ggdag, clarity):  can’t unstratify surgical status, best bet block back-door path opened stratifying . can’t adjust latent variable (, ’re measuring really well, latent variable tool one ), can control baseline pain. Note , technically, surgical status part adjustment set:  variable collider cause exposure outcome (classical confounder)? extension M-bias sometimes called butterfly bias bow-tie bias. variable part two paths: one ’s blocking collider back-door path confounding relationship x y. ?  strategy basically ; need control m block back-door path, opens relationship b, need block path, .  Adjusting either set, {, m} {b, m}, give allow us estimate causal effect x y.","code":"collider_triangle() |>   ggdag_dseparated(controlling_for = \"m\") m_bias(   x = \"Education\",   y = \"Diabetes\",   a = \"Income during Childhood\",   b = \"Genetic Risk \\nfor Diabetes\",   m = \"Mother's Diabetes\" ) |>   ggdag(use_labels = \"label\") m_bias(   x = \"Education\",   y = \"Diabetes\",   a = \"Income during \\nChildhood\",   b = \"Genetic Risk \\nfor Diabetes\",   m = \"Mother's Diabetes\" ) |>   ggdag_dseparated(controlling_for = \"m\", use_labels = \"label\") coords <- dagitty::coordinates(m_bias()) |>   coords2df() coords$name <- c(\"readiness\", \"pain\", \"surgery\", \"ready_tool\", \"pain_change\")  surgical_dag <- dagify(   ready_tool ~ readiness,   surgery ~ readiness + pain,   pain_change ~ ready_tool + pain,   exposure = \"ready_tool\",   outcome = \"pain_change\",   latent = \"readiness\",   labels = c(     ready_tool = \"Measured \\nReadiness\",     pain_change = \"Change \\nin Pain\",     readiness = \"Underlying \\nReadiness\",     pain = \"Baseline \\nPain\",     surgery = \"Surgical \\nStatus\"   ),   coords = coords2list(coords) ) |>   control_for(\"surgery\")  ggdag_adjust(surgical_dag, text = FALSE, use_labels = \"label\", collider_lines = FALSE) ggdag_adjustment_set(surgical_dag, text = FALSE, use_labels = \"label\", shadow = TRUE) ggdag_butterfly_bias(edge_type = \"diagonal\") ggdag_adjustment_set(butterfly_bias(), shadow = TRUE)"},{"path":"https://r-causal.github.io/ggdag/articles/bias-structures.html","id":"measurement-error","dir":"Articles","previous_headings":"","what":"Measurement error","title":"Common Structures of Bias","text":"Measurement error degree mismeasure variable, can lead bias number ways. error dependent exposure outcome, (e.g. measure exposure less accuracy group without disease ), called differential measurement error. error nothing exposure outcome, ’s called non-differential measurement error. conditions, non-differential error bias estimate effect towards null. way, ’s least predictable, small effects inadequately powered studies, can make true effect disappear. error exposure outcome, errors can also associated, opening back-door path exposure outcome. Let’s consider example non-differential error outcome differential error exposure. One common situation can occur recall bias. Let’s say want know taking multivitamins childhood helps protect bladder cancer later life.  outcome, bias depends well diagnosis bladder cancer represents actually bladder cancer. exposure, however, also depends cancer : people sick tend spend time reflecting caused illness. Thus, remember vitamins took children, average, little better controls. effect vitamins bladder cancer, dependency make seem vitamins risk bladder cancer. , fact, protective, recall bias can reduce even reverse association. Measurement error can also cause bias longitudinal settings. Let’s consider another example Modern Epidemiology, uses Centers Epidemiologic Studies–Depression (CES-D) scale, common tool assess depression known measurement error. example, question graduating college honors degree affects depression changes graduation. Assuming doesn’t, adjusting baseline CES-D score–common practice–can induce bias via measurement error:  baseline score change due, part, measurement error baseline, controlling baseline CES-D score (collider) causes change CES-D receiving honors degree d-connected.","code":"# set coordinates coords <- tibble::tribble(   ~name,   ~x,   ~y,   \"bladder_cancer\",   1,   0,   \"vitamins\",   0,   0,   \"diagnosed_bc\",   1,   1,   \"recalled_vits\",   0,   1,   \"bc_error\",   1,   2,   \"vits_error\",   0,   2, )  bladder_dag <- dagify(   diagnosed_bc ~ bc_error + bladder_cancer,   recalled_vits ~ vitamins + vits_error,   vits_error ~ bladder_cancer,   labels = c(     bladder_cancer = \"Bladder Cancer\",     vitamins = \"Childhood Vitamin \\nIntake\",     diagnosed_bc = \"Diagnosed \\nBladder Cancer\",     recalled_vits = \"Memory of \\nTaking Vitamins\",     bc_error = \"Measurement Error, \\nDiagnosis\",     vits_error = \"Measurement Error, \\nVitamins\"   ),   coords = coords ) ggdag(bladder_dag, text = FALSE, use_labels = \"label\") # set coordinates coords <- tibble::tribble(   ~name,   ~x,   ~y,   \"honors\",   1,   3,   \"depression\",   2,   3,   \"cesd\",   2,   2,   \"baseline_error\",   2,   1,   \"depression_change\",   3,   3,   \"cesd_change\",   3,   2,   \"followup_error\",   3,   1 )  cesd_dag <- dagify(   depression ~ honors,   cesd ~ depression + baseline_error,   cesd_change ~ depression_change + followup_error + baseline_error,   labels = c(     honors = \"Honors Degree\",     depression = \"Depression\",     cesd = \"CES-D\",     cesd_change = \"Change \\nin CES-D\",     depression_change = \"Change in \\nDepression\",     baseline_error = \"Measurement Error, \\nBaseline\",     followup_error = \"Measurement Error, \\nFollow-up\"   ),   coords = coords )  cesd_dag |>   ggdag_dconnected(     from = \"honors\",     to = \"cesd_change\",     controlling_for = \"cesd\",     text = FALSE,     use_labels = \"label\",     collider_lines = FALSE   )"},{"path":"https://r-causal.github.io/ggdag/articles/bias-structures.html","id":"selection-bias","dir":"Articles","previous_headings":"","what":"Selection bias","title":"Common Structures of Bias","text":"already seen examples selection bias, let’s consider couple potential pitfalls common design types. Let’s say ’re case-control study want assess effect smoking glioma, type brain cancer. group glioma patients hospital want compare group controls, pick people hospital broken bone, since seems nothing brain cancer. However, perhaps unknown confounding smoking hospital broken bone, like prone reckless behavior. normal population, causal effect smoking glioma, case, ’re selecting people hospitalized, opens back-door path:  Even though smoking doesn’t actually cause glioma, appear association. Actually, case, may make smoking appear protective glioma, since controls likely smokers. Let’s also consider bias arises loss--follow-. randomized clinical trial cohort study, main threat selection bias enters study (although may affect generalizability) leaves . loss--follow-associated exposure outcome, relationship two may biased. Let’s consider trial testing new HIV drug effect CD4 white blood cell count. treatment causes symptoms, participants may leave trial. Similarly, may whose HIV getting worse thus symptomatic, also may cause people leave trial. information people stay study, stratifying follow-status:  follow-downstream collider, symptoms. Controlling downstream collider induces bias , information people remain study, inadvertently stratifying follow-status (see vignette introducing DAGs downstream colliders). Thus, effect estimate HIV drug CD4 count biased.","code":"coords <- tibble::tribble(   ~name,   ~x,   ~y,   \"glioma\",   1,   2,   \"hospitalized\",   2,   3,   \"broken_bone\",   3,   2,   \"reckless\",   4,   1,   \"smoking\",   5,   2 )  dagify(   hospitalized ~ broken_bone + glioma,   broken_bone ~ reckless,   smoking ~ reckless,   labels = c(     hospitalized = \"Hospitalization\",     broken_bone = \"Broken Bone\",     glioma = \"Glioma\",     reckless = \"Reckless \\nBehavior\",     smoking = \"Smoking\"   ),   coords = coords ) |>   ggdag_dconnected(     \"glioma\",     \"smoking\",     controlling_for = \"hospitalized\",     text = FALSE,     use_labels = \"label\",     collider_lines = FALSE   ) dagify(   follow_up ~ symptoms,   symptoms ~ new_rx + dx_severity,   cd4 ~ dx_severity,   labels = c(     follow_up = \"Follow-Up\",     symptoms = \"Symptoms\",     new_rx = \"New HIV Drug\",     dx_severity = \"Underyling \\nHIV Severity\",     cd4 = \"CD4 Count\"   ) ) |>   ggdag_adjust(     \"follow_up\",     layout = \"mds\",     text = FALSE,     use_labels = \"label\",     collider_lines = FALSE   )"},{"path":"https://r-causal.github.io/ggdag/articles/bias-structures.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"Common Structures of Bias","text":"Many, , forms systematic bias can drawn DAGs. sources interesting examples: Miguel Hernán’s course DAGs includes number examples common structures bias: Causal Diagrams: Draw Assumptions Conclusions. Also see article structural approach selection bias. chapter DAGs Modern Epidemiology includes couple examples many directly related conducting observational research, including measurement error, selection bias, residual confounding, missing data.","code":""},{"path":"https://r-causal.github.io/ggdag/articles/intro-to-dags.html","id":"directed-acyclic-graphs","dir":"Articles","previous_headings":"","what":"Directed Acyclic Graphs","title":"An Introduction to Directed Acyclic Graphs","text":"DAG displays assumptions relationship variables (often called nodes context graphs). assumptions make take form lines (edges) going one node another. edges directed, means say single arrowhead indicating effect. ’s simple DAG assume x affects y:  also sometimes see edges look bi-directed, like :  actually shorthand unmeasured cause two variables (words, unmeasured confounding):  DAG also acyclic, means feedback loops; variable can’t descendant. DAGs acyclic, :","code":"dagify(y ~ x) |>   ggdag() dagify(y ~ ~x) |>   ggdag() #  canonicalize the DAG: Add the latent variable in to the graph dagify(y ~ ~x) |>   ggdag_canonical() dagify(   y ~ x,   x ~ a,   a ~ y ) |>   ggdag()"},{"path":"https://r-causal.github.io/ggdag/articles/intro-to-dags.html","id":"structural-causal-graphs","dir":"Articles","previous_headings":"","what":"Structural Causal Graphs","title":"An Introduction to Directed Acyclic Graphs","text":"ggdag specifically concerned structural causal models (SCMs): DAGs portray causal assumptions set variables. Beyond useful conceptions problem ’re working (), also allows us lean well-developed links graphical causal paths statistical associations. Causal DAGs mathematically grounded, also consistent easy understand. Thus, ’re assessing causal effect exposure outcome, drawing assumptions form DAG can help us pick right model without know much math behind . Another way think DAGs non-parametric structural equation models (SEM): explicitly laying paths variables, case DAG, doesn’t matter form relationship two variables takes, direction. rules underpinning DAGs consistent whether relationship simple, linear one, complicated function.","code":""},{"path":"https://r-causal.github.io/ggdag/articles/intro-to-dags.html","id":"relationships-between-variables","dir":"Articles","previous_headings":"","what":"Relationships between variables","title":"An Introduction to Directed Acyclic Graphs","text":"Let’s say ’re looking relationship smoking cardiac arrest. might assume smoking causes changes cholesterol, causes cardiac arrest:  path smoking cardiac arrest directed: smoking causes cholesterol rise, increases risk cardiac arrest. Cholesterol intermediate variable smoking cardiac arrest. Directed paths also chains, causal next. Let’s say also assume weight causes cholesterol rise thus increases risk cardiac arrest. Now ’s another chain DAG: weight cardiac arrest. However, chain indirect, least far relationship smoking cardiac arrest goes. also assume person smokes likely someone engages unhealthy behaviors, overeating. DAG, portrayed latent (unmeasured) node, called unhealthy lifestyle. predilection towards unhealthy behaviors leads smoking increased weight. , relationship smoking weight forked path (weight <- unhealthy lifestyle -> smoking) rather chain; mutual parent, smoking weight associated (real life, ’s probably direct relationship two, ’ll ignore simplicity). Forks chains two three main types paths: Chains Forks Inverted forks (paths colliders) inverted fork two arrowheads meet node, ’ll discuss shortly. also common ways describing relationships nodes: parents, children, ancestors, descendants, neighbors (others, well, refer less common relationships). Parents children refer direct relationships; descendants ancestors can anywhere along path node, respectively. , smoking weight parents cholesterol, smoking weight children unhealthy lifestyle. Cardiac arrest descendant unhealthy lifestyle, turn ancestor nodes graph. , studying causal effect smoking cardiac arrest, DAG leave us? want know directed path smoking cardiac arrest, also exists indirect, back-door, path. confounding. Judea Pearl, developed much theory causal graphs, said confounding like water pipe: flows freely open pathways, need block somewhere along way. don’t necessarily need block water multiple points along back-door path, although may block one path. often talk confounders, really talk confounding, pathway particular node along path. Chains forks open pathways, DAG nothing conditioned upon, back-door paths must one two. addition directed pathway cardiac arrest, ’s also open back-door path forked path unhealthy lifestyle chain cardiac arrest:  need account back-door path analysis. many ways go –stratification, including variable regression model, matching, inverse probability weighting–pros cons. strategy must include decision variables account . Many analysts take strategy putting possible confounders. can bad news, adjusting colliders mediators can introduce bias, ’ll discuss shortly. Instead, ’ll look minimally sufficient adjustment sets: sets covariates , adjusted , block back-door paths, include less necessary. means can many minimally sufficient sets, remove even one variable given set, back-door path open. DAGs, like first one vignette (x -> y), back-door paths close, minimally sufficient adjustment set empty (sometimes written “{}”). Others, like cyclic DAG , DAGs important variables unmeasured, can produce sets sufficient close back-door paths. smoking-cardiac arrest question, single set single variable: {weight}. Accounting weight give us unbiased estimate relationship smoking cardiac arrest, assuming DAG correct. need (want ) control cholesterol, however, ’s intermediate variable smoking cardiac arrest; controlling blocks path two, bias estimate (see mediation).  complicated DAGs produce complicated adjustment sets; assuming DAG correct, given set theoretically close back-door path outcome exposure. Still, one set may better use , depending data. instance, one set may contain variable known lot measurement error lot missing observations. may, , better use set think going better representation variables need include. Including variable doesn’t actually represent node well lead residual confounding. controlling multiple variables along back-door path, variable isn’t along back-door path? Even variables colliders mediators, can still cause problem, depending model. estimates, like risk ratios, work fine non-confounders included. collapsible: risk ratios constant across strata non-confounders. common estimates, though, like odds ratio hazard ratio, non-collapsible: necessarily constant across strata non-confounders thus can biased inclusion. situations, like outcome rare population (-called rare disease assumption), using sophisticated sampling techniques, like incidence-density sampling, approximate risk ratio. Otherwise, including extra variables may problematic.","code":"smoking_ca_dag <- dagify(   cardiacarrest ~ cholesterol,   cholesterol ~ smoking + weight,   smoking ~ unhealthy,   weight ~ unhealthy,   labels = c(     \"cardiacarrest\" = \"Cardiac\\n Arrest\",     \"smoking\" = \"Smoking\",     \"cholesterol\" = \"Cholesterol\",     \"unhealthy\" = \"Unhealthy\\n Lifestyle\",     \"weight\" = \"Weight\"   ),   latent = \"unhealthy\",   exposure = \"smoking\",   outcome = \"cardiacarrest\" )  ggdag(smoking_ca_dag, text = FALSE, use_labels = \"label\") ggdag_paths(smoking_ca_dag, text = FALSE, use_labels = \"label\", shadow = TRUE) ggdag_adjustment_set(smoking_ca_dag, text = FALSE, use_labels = \"label\", shadow = TRUE)"},{"path":"https://r-causal.github.io/ggdag/articles/intro-to-dags.html","id":"colliders-and-collider-stratification-bias","dir":"Articles","previous_headings":"","what":"Colliders and collider-stratification bias","title":"An Introduction to Directed Acyclic Graphs","text":"path inverted fork (x -> m <- y), node two arrowheads meet called collider (paths collide ). inverted fork open path; blocked collider. say, don’t need account m assess causal effect x y; back-door path already blocked m. Let’s consider example. Influenza chicken pox independent; causes (influenza viruses varicella-zoster virus, respectively) nothing . real life, may confounders associate , like depressed immune system, example ’ll assume unconfounded. However, flu chicken pox cause fevers. DAG looks like :  want assess causal effect influenza chicken pox, need account anything. terminology used Pearl, already d-separated (direction separated), effect one , back-door paths:  However, control fever, become associated within strata collider, fever. open biasing pathway two, become d-connected:  can counter-intuitive first. controlling confounder reduce bias adjusting collider increase ? ’s whether fever tells something disease. fever, don’t flu, now evidence chicken pox. Pearl presents like algebra: can’t solve y = 10 + m. know m = 1, can solve y. Unfortunately, ’s second, less obvious form collider-stratification bias: adjusting descendant collider. means variable downstream collider can also cause form bias. example, flu-chicken pox-fever example, may fever leads people taking fever reducer, like acetaminophen. fever reducers downstream fever, controlling induces downstream collider-stratification bias:  Collider-stratification bias responsible many cases bias, often dealt appropriately. Selection bias, missing data, publication bias can thought collider-stratification bias. becomes trickier complicated DAGs; sometimes colliders also confounders, need either come strategy adjust resulting bias adjusting collider, need pick strategy ’s likely result least amount bias. See vignette common structures bias .","code":"fever_dag <- collider_triangle(   x = \"Influenza\",   y = \"Chicken Pox\",   m = \"Fever\" )  ggdag(fever_dag, text = FALSE, use_labels = \"label\") ggdag_dseparated(fever_dag, text = FALSE, use_labels = \"label\") ggdag_dseparated(   fever_dag,   controlling_for = \"m\",   text = FALSE,   use_labels = \"label\" ) dagify(   fever ~ flu + pox,   acetaminophen ~ fever,   labels = c(     \"flu\" = \"Influenza\",     \"pox\" = \"Chicken Pox\",     \"fever\" = \"Fever\",     \"acetaminophen\" = \"Acetaminophen\"   ) ) |>   ggdag_dseparated(     from = \"flu\",     to = \"pox\",     controlling_for = \"acetaminophen\",     text = FALSE,     use_labels = \"label\"   )"},{"path":"https://r-causal.github.io/ggdag/articles/intro-to-dags.html","id":"mediation","dir":"Articles","previous_headings":"","what":"Mediation","title":"An Introduction to Directed Acyclic Graphs","text":"Controlling intermediate variables may also induce bias, decomposes total effect x y parts. Depending research question, may exactly want, case use mediation analysis, e.g. via SEM, can estimate direct, indirect, total effects. Let’s return smoking example. , care smoking affects cardiac arrest, pathways cholesterol may take. Moreover, since cholesterol (least DAG) intercepts directed pathway smoking cardiac arrest, controlling block relationship; smoking cardiac arrest appear unassociated (note ’m including paths opened controlling collider plot clarity):  Now smoking cardiac arrest d-separated. Since question total effect smoking cardiac arrest, result now going biased.","code":"ggdag_dseparated(   smoking_ca_dag,   controlling_for = c(\"weight\", \"cholesterol\"),   text = FALSE,   use_labels = \"label\",   collider_lines = FALSE )"},{"path":"https://r-causal.github.io/ggdag/articles/intro-to-dags.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"An Introduction to Directed Acyclic Graphs","text":"Judea Pearl also number texts subject varying technical difficulty. friendly start recently released Book , well article summarizing book: Seven Tools Causal Inference Reflections Machine Learning. technical introduction Causal Inference Statistics: Primer. See also article Sander Greenland James Robins collapsibility: Confounding Collapsibility Causal Inference. Miguel Hernán, written extensively subject causal inference DAGs, accessible course edx teaches use DAGs causal inference: Causal Diagrams: Draw Assumptions Conclusions. Also see article Hazard Hazard Ratios Julia Rohrer readable paper introducing DAGs, mostly perspective psychology: Thinking Clearly Correlations Causation: Graphical Causal Models Observational Data ’re epidemiologist, also recommend chapter DAGs Modern Epidemiology.","code":""},{"path":"https://r-causal.github.io/ggdag/articles/intro-to-ggdag.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"An Introduction to ggdag","text":"ggdag extends powerful dagitty package work context tidyverse. uses dagitty’s algorithms analyzing structural causal graphs produce tidy results, can used ggplot2 ggraph manipulated tools tidyverse, like dplyr.","code":""},{"path":"https://r-causal.github.io/ggdag/articles/intro-to-ggdag.html","id":"creating-directed-acyclic-graphs","dir":"Articles","previous_headings":"","what":"Creating Directed Acyclic Graphs","title":"An Introduction to ggdag","text":"already use dagitty, ggdag can tidy DAG directly. Note , dagitty supports number graph types, ggdag currently supports DAGs. dagitty uses syntax similar dot language graphviz. syntax advantage compact, ggdag also provides ability create dagitty object using R-like formula syntax dagify() function. dagify() accepts number formulas create DAG. also options declaring variables exposures, outcomes, latent, well coordinates labels node. Currently, ggdag supports directed (x ~ y) bi-directed (~~ b) relationships tidy_dagitty() uses layout functions ggraph igraph coordinates none provided, can specified layout argument. Objects class tidy_dagitty dagitty can plotted quickly ggdag(). DAG yet tidied, ggdag() quick plotting functions ggdag internally.  tidy_dagitty object just list tbl_df, called data, dagitty object, called dag:","code":"library(dagitty) library(ggdag) library(ggplot2)  dag <- dagitty(\"dag{y <- z -> x}\") tidy_dagitty(dag) #> # DAG: #> # A `dagitty` DAG with: 3 nodes and 2 edges #> # #> # Data: #> # A tibble: 4 × 7 #>   name        x      y direction to       xend   yend #>   <chr>   <dbl>  <dbl> <fct>     <chr>   <dbl>  <dbl> #> 1 x      0.0449 -0.238 NA        NA    NA      NA     #> 2 y     -1.60    1.36  NA        NA    NA      NA     #> 3 z     -0.774   0.556 ->        x      0.0449 -0.238 #> 4 z     -0.774   0.556 ->        y     -1.60    1.36  #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame dagified <- dagify(   x ~ z,   y ~ z,   exposure = \"x\",   outcome = \"y\" ) tidy_dagitty(dagified) #> # DAG: #> # A `dagitty` DAG with: 3 nodes and 2 edges #> # Exposure: x #> # Outcome: y #> # #> # Data: #> # A tibble: 4 × 7 #>   name        x      y direction to       xend   yend #>   <chr>   <dbl>  <dbl> <fct>     <chr>   <dbl>  <dbl> #> 1 x     -2.00    0.939 NA        NA    NA      NA     #> 2 y      0.0343 -0.106 NA        NA    NA      NA     #> 3 z     -0.982   0.416 ->        x     -2.00    0.939 #> 4 z     -0.982   0.416 ->        y      0.0343 -0.106 #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame ggdag(dag, layout = \"circle\") tidy_dag <- tidy_dagitty(dagified) str(tidy_dag) #> List of 2 #>  $ data: tibble [4 × 7] (S3: tbl_df/tbl/data.frame) #>   ..$ name     : chr [1:4] \"x\" \"y\" \"z\" \"z\" #>   ..$ x        : num [1:4] 1.43 -0.835 0.298 0.298 #>   ..$ y        : num [1:4] 0.756 1.119 0.938 0.938 #>   ..$ direction: Factor w/ 3 levels \"->\",\"<->\",\"--\": NA NA 1 1 #>   ..$ to       : chr [1:4] NA NA \"x\" \"y\" #>   ..$ xend     : num [1:4] NA NA 1.43 -0.835 #>   ..$ yend     : num [1:4] NA NA 0.756 1.119 #>   ..- attr(*, \"circular\")= logi FALSE #>  $ dag : 'dagitty' Named chr \"dag {\\nx [exposure,pos=\\\"1.430,0.756\\\"]\\ny [outcome,pos=\\\"-0.835,1.119\\\"]\\nz [pos=\\\"0.298,0.938\\\"]\\nz -> x\\nz -> y\\n}\\n\" #>  - attr(*, \"class\")= chr \"tidy_dagitty\""},{"path":"https://r-causal.github.io/ggdag/articles/intro-to-ggdag.html","id":"working-with-dags","dir":"Articles","previous_headings":"","what":"Working with DAGs","title":"An Introduction to ggdag","text":"analytic functions dagitty extensions ggdag named dag_*() node_*(), depending working specific nodes entire DAG. simple example node_parents(), adds column tidy_dagitty object parents given variable: working entire DAG produce tidy_dagitty pathways two variables: ggdag also supports piping functions includes pipe internally (don’t need load dplyr magrittr). Basic dplyr verbs also supported (anything complex can done directly data object).","code":"node_parents(tidy_dag, \"x\") #> # DAG: #> # A `dagitty` DAG with: 3 nodes and 2 edges #> # Exposure: x #> # Outcome: y #> # #> # Data: #> # A tibble: 4 × 8 #>   name       x     y direction to      xend   yend parent #>   <chr>  <dbl> <dbl> <fct>     <chr>  <dbl>  <dbl> <fct>  #> 1 x      1.43  0.756 NA        NA    NA     NA     child  #> 2 y     -0.835 1.12  NA        NA    NA     NA     NA     #> 3 z      0.298 0.938 ->        x      1.43   0.756 parent #> 4 z      0.298 0.938 ->        y     -0.835  1.12  parent #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame bigger_dag <- dagify(   y ~ x + a + b,   x ~ a + b,   exposure = \"x\",   outcome = \"y\" ) #  automatically searches the paths between the variables labelled exposure and #  outcome dag_paths(bigger_dag) #> # DAG: #> # A `dagitty` DAG with: 4 nodes and 5 edges #> # Exposure: x #> # Outcome: y #> # Paths: 3 open paths: {x -> y}, {x <- a -> y}, {x <- b -> y} #> # #> # Data: #> # A tibble: 20 × 10 #>    set   name       x      y direction to     xend   yend path      path_type #>    <chr> <chr>  <dbl>  <dbl> <fct>     <chr> <dbl>  <dbl> <chr>     <chr>     #>  1 1     a     -0.554 -1.23  ->        x     -1.46 -0.618 NA        NA        #>  2 1     a     -0.554 -1.23  ->        y     -1.60 -1.53  NA        NA        #>  3 1     b     -2.51  -0.914 ->        x     -1.46 -0.618 NA        NA        #>  4 1     b     -2.51  -0.914 ->        y     -1.60 -1.53  NA        NA        #>  5 1     x     -1.46  -0.618 ->        y     -1.60 -1.53  open path direct    #>  6 1     y     -1.60  -1.53  NA        NA    NA    NA     open path direct    #>  7 2     a     -0.554 -1.23  ->        x     -1.46 -0.618 open path backdoor  #>  8 2     a     -0.554 -1.23  ->        y     -1.60 -1.53  open path backdoor  #>  9 2     b     -2.51  -0.914 ->        x     -1.46 -0.618 NA        NA        #> 10 2     b     -2.51  -0.914 ->        y     -1.60 -1.53  NA        NA        #> 11 2     x     -1.46  -0.618 ->        y     -1.60 -1.53  NA        NA        #> 12 2     y     -1.60  -1.53  NA        NA    NA    NA     open path backdoor  #> 13 2     x     -1.46  -0.618 NA        NA    NA    NA     open path backdoor  #> 14 3     a     -0.554 -1.23  ->        x     -1.46 -0.618 NA        NA        #> 15 3     a     -0.554 -1.23  ->        y     -1.60 -1.53  NA        NA        #> 16 3     b     -2.51  -0.914 ->        x     -1.46 -0.618 open path backdoor  #> 17 3     b     -2.51  -0.914 ->        y     -1.60 -1.53  open path backdoor  #> 18 3     x     -1.46  -0.618 ->        y     -1.60 -1.53  NA        NA        #> 19 3     y     -1.60  -1.53  NA        NA    NA    NA     open path backdoor  #> 20 3     x     -1.46  -0.618 NA        NA    NA    NA     open path backdoor  #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame library(dplyr) #  find how many variables are in between x and y in each path bigger_dag |>   dag_paths() |>   group_by(set) |>   filter(!is.na(path) & !is.na(name)) |>   summarize(n_vars_between = n() - 1L) #> # A tibble: 1 × 1 #>   n_vars_between #>            <int> #> 1              9"},{"path":"https://r-causal.github.io/ggdag/articles/intro-to-ggdag.html","id":"plotting-dags","dir":"Articles","previous_headings":"","what":"Plotting DAGs","title":"An Introduction to ggdag","text":"dag_*() node_*() functions corresponding ggdag_*() quickly plotting results. call corresponding dag_*() node_*() function internally plot results ggplot2.","code":"ggdag_paths(bigger_dag) ggdag_parents(bigger_dag, \"x\") #  quickly get the miniminally sufficient adjustment sets to adjust for when #  analyzing the effect of x on y ggdag_adjustment_set(bigger_dag)"},{"path":"https://r-causal.github.io/ggdag/articles/intro-to-ggdag.html","id":"plotting-directly-in-ggplot2","dir":"Articles","previous_headings":"","what":"Plotting directly in ggplot2","title":"An Introduction to ggdag","text":"ggdag() friends , large, fairly thin wrappers around included ggplot2 geoms plotting nodes, text, edges variables. example, ggdag_parents() can made directly ggplot2 like :  heavy lifters ggdag geom_dag_node()/geom_dag_point(), geom_dag_edges(), geom_dag_text(), theme_dag(), scale_adjusted(). geom_dag_node() geom_dag_text() plot nodes text, respectively, modifications geom_point() geom_text(). geom_dag_node() slightly stylized (internal white circle), geom_dag_point() looks like geom_point() larger size. theme_dag() removes axes ticks, since little meaning causal model, also makes changes. expand_plot() convenience function makes modifications scale plot make amenable nodes large points text scale_adjusted() provides defaults common analyses DAGs, e.g. setting shape adjusted variables square. geom_dag_edges() also convenience function plots directed bi-directed edges different geoms arrows. Directed edges straight lines single arrow head, bi-directed lines, shorthand latent parent variable two bi-directed variables (e.g. <- L -> b), plotted arc arrow heads either side. can also call edge functions directly, particularly directed edges. Much ggdag’s edge functionality comes ggraph, defaults (e.g. arrow heads, truncated lines) set DAGs mind. Currently, ggdag four type edge geoms: geom_dag_edges_link(), plots straight lines, geom_dag_edges_arc(), geom_dag_edges_diagonal(), geom_dag_edges_fan().  bi-directed edges like plot directed, node_canonical() automatically insert latent variable .  also geoms based ggrepel inserting text labels, special geom called geom_dag_collider_edges() highlights biasing pathways opened adjusting collider nodes. See vignette introducing DAGs info.","code":"bigger_dag |>   node_parents(\"x\") |>   ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +   geom_dag_point() +   geom_dag_edges() +   geom_dag_text(col = \"white\") +   theme_dag() +   scale_color_hue(breaks = c(\"parent\", \"child\")) #  ignores NA in legend dagify(   y ~ x,   m ~ x + y ) |>   ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +   geom_dag_point() +   geom_dag_edges_arc() +   geom_dag_text() +   theme_dag() dagify(   y ~ x + z,   x ~ ~z ) |>   node_canonical() |>   ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +   geom_dag_point() +   geom_dag_edges_diagonal() +   geom_dag_text() +   theme_dag()"},{"path":"https://r-causal.github.io/ggdag/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Malcolm Barrett. Author, maintainer.","code":""},{"path":"https://r-causal.github.io/ggdag/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barrett M (2025). ggdag: Analyze Create Elegant Directed Acyclic Graphs. R package version 0.2.13.9000, https://github.com/r-causal/ggdag.","code":"@Manual{,   title = {ggdag: Analyze and Create Elegant Directed Acyclic Graphs},   author = {Malcolm Barrett},   year = {2025},   note = {R package version 0.2.13.9000},   url = {https://github.com/r-causal/ggdag}, }"},{"path":"https://r-causal.github.io/ggdag/index.html","id":"ggdag-an-r-package-for-visualizing-and-analyzing-causal-directed-acyclic-graphs-","dir":"","previous_headings":"","what":"Analyze and Create Elegant Directed Acyclic Graphs","title":"Analyze and Create Elegant Directed Acyclic Graphs","text":"Tidy, analyze, plot causal directed acyclic graphs (DAGs). ggdag uses powerful dagitty package create analyze structural causal models plot using ggplot2 ggraph consistent easy manner.","code":""},{"path":"https://r-causal.github.io/ggdag/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze and Create Elegant Directed Acyclic Graphs","text":"can install ggdag : can install development version GitHub :","code":"install.packages(\"ggdag\") # install.packages(\"devtools\") devtools::install_github(\"r-causal/ggdag\")"},{"path":"https://r-causal.github.io/ggdag/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Analyze and Create Elegant Directed Acyclic Graphs","text":"ggdag makes easy use dagitty context tidyverse. can directly tidy dagitty objects use convenience functions create DAGs using R-like syntax: ggdag also provides functionality analyzing DAGs plotting ggplot2:   well geoms functions plotting directly ggplot2:  common structures bias:","code":"library(ggdag) library(ggplot2)  #  example from the dagitty package dag <- dagitty::dagitty(\"dag {     y <- x <- z1 <- v -> z2 -> y     z1 <- w1 <-> w2 -> z2     x <- w1 -> y     x <- w2 -> y     x [exposure]     y [outcome]   }\")  tidy_dag <- tidy_dagitty(dag)  tidy_dag #> # DAG: #> # A `dagitty` DAG with: 7 nodes and 12 edges #> # Exposure: x #> # Outcome: y #> # #> # Data: #> # A tibble: 13 × 7 #>    name       x     y direction to      xend   yend #>    <chr>  <dbl> <dbl> <fct>     <chr>  <dbl>  <dbl> #>  1 v     -0.180 0.946 ->        z1     1.20   0.608 #>  2 v     -0.180 0.946 ->        z2     0.177  2.32  #>  3 w1     1.64  1.49  ->        x      2.23   1.70  #>  4 w1     1.64  1.49  ->        y      1.63   2.71  #>  5 w1     1.64  1.49  ->        z1     1.20   0.608 #>  6 w1     1.64  1.49  <->       w2     1.16   2.30  #>  7 w2     1.16  2.30  ->        x      2.23   1.70  #>  8 w2     1.16  2.30  ->        y      1.63   2.71  #>  9 w2     1.16  2.30  ->        z2     0.177  2.32  #> 10 x      2.23  1.70  ->        y      1.63   2.71  #> 11 y      1.63  2.71  <NA>      <NA>  NA     NA     #> 12 z1     1.20  0.608 ->        x      2.23   1.70  #> 13 z2     0.177 2.32  ->        y      1.63   2.71  #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame  #  using more R-like syntax to create the same DAG tidy_ggdag <- dagify(   y ~ x + z2 + w2 + w1,   x ~ z1 + w1 + w2,   z1 ~ w1 + v,   z2 ~ w2 + v,   w1 ~ ~w2, # bidirected path   exposure = \"x\",   outcome = \"y\" ) |>   tidy_dagitty()  tidy_ggdag #> # DAG: #> # A `dagitty` DAG with: 7 nodes and 12 edges #> # Exposure: x #> # Outcome: y #> # #> # Data: #> # A tibble: 13 × 7 #>    name          x     y direction to         xend  yend #>    <chr>     <dbl> <dbl> <fct>     <chr>     <dbl> <dbl> #>  1 v      0.696     4.02 ->        z1     1.07      2.66 #>  2 v      0.696     4.02 ->        z2    -0.669     3.67 #>  3 w1     0.175     2.21 ->        x     -0.000636  1.61 #>  4 w1     0.175     2.21 ->        y     -1.05      2.22 #>  5 w1     0.175     2.21 ->        z1     1.07      2.66 #>  6 w1     0.175     2.21 <->       w2    -0.613     2.67 #>  7 w2    -0.613     2.67 ->        x     -0.000636  1.61 #>  8 w2    -0.613     2.67 ->        y     -1.05      2.22 #>  9 w2    -0.613     2.67 ->        z2    -0.669     3.67 #> 10 x     -0.000636  1.61 ->        y     -1.05      2.22 #> 11 y     -1.05      2.22 <NA>      <NA>  NA        NA    #> 12 z1     1.07      2.66 ->        x     -0.000636  1.61 #> 13 z2    -0.669     3.67 ->        y     -1.05      2.22 #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame ggdag(tidy_ggdag) +   theme_dag() ggdag_adjustment_set(tidy_ggdag, node_size = 14) +   theme(legend.position = \"bottom\") dagify(m ~ x + y) |>   tidy_dagitty() |>   node_dconnected(\"x\", \"y\", controlling_for = \"m\") |>   ggplot(aes(     x = x,     y = y,     xend = xend,     yend = yend,     shape = adjusted,     col = d_relationship   )) +   geom_dag_edges(end_cap = ggraph::circle(10, \"mm\")) +   geom_dag_collider_edges() +   geom_dag_point() +   geom_dag_text(col = \"white\") +   theme_dag() +   scale_adjusted(include_color = FALSE) +   expand_plot(expand_y = expansion(c(0.2, 0.2))) +   scale_color_viridis_d(     name = \"d-relationship\",     na.value = \"grey85\",     begin = .35   ) ggdag_equivalent_dags(confounder_triangle()) ggdag_butterfly_bias(edge_type = \"diagonal\")"},{"path":"https://r-causal.github.io/ggdag/reference/activate_collider_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Activate paths opened by stratifying on a collider — activate_collider_paths","title":"Activate paths opened by stratifying on a collider — activate_collider_paths","text":"Stratifying colliders can open biasing pathways variables. activate_collider_paths activates pathways given variable set variables adjust adds tidy_dagitty.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/activate_collider_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Activate paths opened by stratifying on a collider — activate_collider_paths","text":"","code":"activate_collider_paths(.tdy_dag, adjust_for, ...)"},{"path":"https://r-causal.github.io/ggdag/reference/activate_collider_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activate paths opened by stratifying on a collider — activate_collider_paths","text":".tdy_dag tidy_dagitty dagitty object adjust_for character vector, variable(s) adjust . ... additional arguments passed tidy_dagitty()","code":""},{"path":"https://r-causal.github.io/ggdag/reference/activate_collider_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Activate paths opened by stratifying on a collider — activate_collider_paths","text":"tidy_dagitty additional rows collider-activated pathways","code":""},{"path":[]},{"path":"https://r-causal.github.io/ggdag/reference/activate_collider_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Activate paths opened by stratifying on a collider — activate_collider_paths","text":"","code":"dag <- dagify(m ~ x + y, x ~ y)  collided_dag <- activate_collider_paths(dag, adjust_for = \"m\") collided_dag #> # DAG: #> # A `dagitty` DAG with: 3 nodes and 3 edges #> # Paths opened by conditioning on a collider: x <-> y, x <-> y #> # #> # Data: #> # A tibble: 6 × 8 #>   name       x      y direction to      xend   yend collider_line #>   <chr>  <dbl>  <dbl> <fct>     <chr>  <dbl>  <dbl> <lgl>         #> 1 m     -0.130 -1.10  NA        NA    NA     NA     FALSE         #> 2 x      0.871 -1.14  ->        m     -0.130 -1.10  FALSE         #> 3 y      0.404 -0.256 ->        m     -0.130 -1.10  FALSE         #> 4 y      0.404 -0.256 ->        x      0.871 -1.14  FALSE         #> 5 x      0.871 -1.14  <->       y      0.404 -0.256 TRUE          #> 6 x      0.871 -1.14  <->       y      0.404 -0.256 TRUE          #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame"},{"path":"https://r-causal.github.io/ggdag/reference/adjustment_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariate Adjustment Sets — Covariate Adjustment Sets","title":"Covariate Adjustment Sets — Covariate Adjustment Sets","text":"See dagitty::adjustmentSets() details.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/adjustment_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariate Adjustment Sets — Covariate Adjustment Sets","text":"","code":"dag_adjustment_sets(.tdy_dag, exposure = NULL, outcome = NULL, ...)  ggdag_adjustment_set(   .tdy_dag,   exposure = NULL,   outcome = NULL,   ...,   shadow = TRUE,   size = 1,   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 10,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   label = NULL,   text = NULL,   node = deprecated(),   stylized = deprecated(),   expand_x = expansion(c(0.25, 0.25)),   expand_y = expansion(c(0.2, 0.2)) )"},{"path":"https://r-causal.github.io/ggdag/reference/adjustment_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariate Adjustment Sets — Covariate Adjustment Sets","text":".tdy_dag tidy_dagitty dagitty object exposure character vector, exposure variable. Default NULL, case determined DAG. outcome character vector, outcome variable. Default NULL, case determined DAG. ... additional arguments adjustmentSets shadow logical. Show paths blocked adjustment? size numeric value scaling size elements DAG. allows change scale DAG without changing proportions. node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. edge_width width edges. edge_cap size edge caps (distance arrowheads node borders). arrow_length length arrows edges. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. text bare name column use geom_dag_text(). use_text = TRUE, default use name. node Deprecated. stylized Deprecated. expand_x, expand_y Vector range expansion constants used add padding around data, ensure placed distance away axes. Use convenience function ggplot2::expansion() generate values expand argument.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/adjustment_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariate Adjustment Sets — Covariate Adjustment Sets","text":"tidy_dagitty adjusted column set column, indicating adjustment status DAG ID, respectively, adjustment sets ggplot","code":""},{"path":"https://r-causal.github.io/ggdag/reference/adjustment_sets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariate Adjustment Sets — Covariate Adjustment Sets","text":"","code":"dag <- dagify(   y ~ x + z2 + w2 + w1,   x ~ z1 + w1,   z1 ~ w1 + v,   z2 ~ w2 + v,   w1 ~ ~w2,   exposure = \"x\",   outcome = \"y\" )  tidy_dagitty(dag) |> dag_adjustment_sets() #> # DAG: #> # A `dagitty` DAG with: 7 nodes and 11 edges #> # Exposure: x #> # Outcome: y #> # Adjustment sets: 3 sets: {w1, w2, z2}, {v, w1}, {w1, z1} #> # #> # Data: #> # A tibble: 36 × 9 #>    name        x      y direction to      xend   yend adjusted   set          #>    <chr>   <dbl>  <dbl> <fct>     <chr>  <dbl>  <dbl> <chr>      <chr>        #>  1 v     -0.0993 -1.12  ->        z1    -0.938 -2.26  unadjusted {w1, w2, z2} #>  2 v     -0.0993 -1.12  ->        z2    -1.20  -0.305 unadjusted {w1, w2, z2} #>  3 w1    -2.34   -1.88  ->        x     -1.93  -2.66  adjusted   {w1, w2, z2} #>  4 w1    -2.34   -1.88  ->        y     -1.98  -1.23  adjusted   {w1, w2, z2} #>  5 w1    -2.34   -1.88  ->        z1    -0.938 -2.26  adjusted   {w1, w2, z2} #>  6 w1    -2.34   -1.88  <->       w2    -2.47  -0.486 adjusted   {w1, w2, z2} #>  7 w2    -2.47   -0.486 ->        y     -1.98  -1.23  adjusted   {w1, w2, z2} #>  8 w2    -2.47   -0.486 ->        z2    -1.20  -0.305 adjusted   {w1, w2, z2} #>  9 x     -1.93   -2.66  ->        y     -1.98  -1.23  unadjusted {w1, w2, z2} #> 10 y     -1.98   -1.23  NA        NA    NA     NA     unadjusted {w1, w2, z2} #> # ℹ 26 more rows #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame  ggdag_adjustment_set(dag)   ggdag_adjustment_set(   dagitty::randomDAG(10, .5),   exposure = \"x3\",   outcome = \"x5\" )"},{"path":"https://r-causal.github.io/ggdag/reference/aes_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Aesthetics for Directed Acyclic Graphs (DAGs) — aes_dag","title":"Define Aesthetics for Directed Acyclic Graphs (DAGs) — aes_dag","text":"aes_dag() wrapper around aes() specifies x, y, xend, yend, required DAG visualizations. merges additional aesthetics, e.g. color shape, default aesthetic mappings.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/aes_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Aesthetics for Directed Acyclic Graphs (DAGs) — aes_dag","text":"","code":"aes_dag(...)"},{"path":"https://r-causal.github.io/ggdag/reference/aes_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Aesthetics for Directed Acyclic Graphs (DAGs) — aes_dag","text":"... Additional aesthetic mappings passed arguments. can include aesthetic supported ggplot2 (e.g., color, size, shape).","code":""},{"path":"https://r-causal.github.io/ggdag/reference/aes_dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Aesthetics for Directed Acyclic Graphs (DAGs) — aes_dag","text":"ggplot2 aesthetic mapping object includes default DAG aesthetics user-specified aesthetics.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/aes_dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Aesthetics for Directed Acyclic Graphs (DAGs) — aes_dag","text":"","code":"library(ggplot2) confounder_triangle() |>   dag_adjustment_sets() |>   ggplot(aes_dag(color = .data$adjusted)) +   geom_dag() +   facet_wrap(~set)"},{"path":"https://r-causal.github.io/ggdag/reference/as.data.frame.tidy_dagitty.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a tidy_dagitty object to data.frame — as.data.frame.tidy_dagitty","title":"Convert a tidy_dagitty object to data.frame — as.data.frame.tidy_dagitty","text":"Convert tidy_dagitty object data.frame","code":""},{"path":"https://r-causal.github.io/ggdag/reference/as.data.frame.tidy_dagitty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a tidy_dagitty object to data.frame — as.data.frame.tidy_dagitty","text":"","code":"# S3 method for class 'tidy_dagitty' as.data.frame(x, row.names = NULL, optional = FALSE, ...)"},{"path":"https://r-causal.github.io/ggdag/reference/as.data.frame.tidy_dagitty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a tidy_dagitty object to data.frame — as.data.frame.tidy_dagitty","text":"x object class tidy_dagitty row.names NULL character vector giving row names data frame. Missing values allowed. optional logical. TRUE, setting row names converting column names (syntactic names: see make.names) optional. Note R's base package .data.frame() methods use optional column names treatment, basically meaning data.frame(*, check.names = !optional) ... optional arguments passed .data.frame()","code":""},{"path":"https://r-causal.github.io/ggdag/reference/as.tbl.tidy_dagitty.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a tidy_dagitty object to tbl — as.tbl.tidy_dagitty","title":"Convert a tidy_dagitty object to tbl — as.tbl.tidy_dagitty","text":"Convert tidy_dagitty object tbl","code":""},{"path":"https://r-causal.github.io/ggdag/reference/as.tbl.tidy_dagitty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a tidy_dagitty object to tbl — as.tbl.tidy_dagitty","text":"","code":"# S3 method for class 'tidy_dagitty' as.tbl(x, row.names = NULL, optional = FALSE, ...)  # S3 method for class 'tidy_dagitty' as_tibble(x, row.names = NULL, optional = FALSE, ...)"},{"path":"https://r-causal.github.io/ggdag/reference/as.tbl.tidy_dagitty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a tidy_dagitty object to tbl — as.tbl.tidy_dagitty","text":"x object class tidy_dagitty row.names NULL character vector giving row names data frame. Missing values allowed. optional logical. TRUE, setting row names converting column names (syntactic names: see make.names) optional. Note R's base package .data.frame() methods use optional column names treatment, basically meaning data.frame(*, check.names = !optional) ... optional arguments passed dplyr::as_tibble()","code":""},{"path":"https://r-causal.github.io/ggdag/reference/as_tbl_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert DAGS to tidygraph — as_tbl_graph","title":"Convert DAGS to tidygraph — as_tbl_graph","text":"thin wrapper convert tidy_dagitty dagitty objects tbl_graph, can used work tidygraph ggraph directly. See tidygraph::as_tbl_graph().","code":""},{"path":"https://r-causal.github.io/ggdag/reference/as_tbl_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert DAGS to tidygraph — as_tbl_graph","text":"","code":"# S3 method for class 'tidy_dagitty' as_tbl_graph(x, directed = TRUE, ...)  # S3 method for class 'dagitty' as_tbl_graph(x, directed = TRUE, ...)"},{"path":"https://r-causal.github.io/ggdag/reference/as_tbl_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert DAGS to tidygraph — as_tbl_graph","text":"x object class tidy_dagitty dagitty directed logical. constructed graph directed? Default TRUE ... arguments passed as_tbl_graph","code":""},{"path":"https://r-causal.github.io/ggdag/reference/as_tbl_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert DAGS to tidygraph — as_tbl_graph","text":"tbl_graph","code":""},{"path":"https://r-causal.github.io/ggdag/reference/as_tbl_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert DAGS to tidygraph — as_tbl_graph","text":"","code":"library(ggraph) library(tidygraph) #>  #> Attaching package: ‘tidygraph’ #> The following object is masked from ‘package:stats’: #>  #>     filter butterfly_bias() |>   as_tbl_graph() |>   ggraph() +   geom_edge_diagonal() +   geom_node_point() #> Using \"sugiyama\" as default layout"},{"path":"https://r-causal.github.io/ggdag/reference/as_tidy_dagitty.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert objects into tidy_dagitty objects — as_tidy_dagitty","title":"Convert objects into tidy_dagitty objects — as_tidy_dagitty","text":"alternative API specification tidy_dagitty(), as_tidy_dagitty() allows create tidy_dagitty objects data frames lists. also method dagitty objects, thin wrapper tidy_dagitty(). create DAG list, element list character vector, order elements time order appear DAG, e.g. element 1 occurs time point 1. create DAG data frame, must contain name columns, representing nodes edges leading nodes. x, y, xend, yend columns, used coordinates. Otherwise, layout used. See tidy_dagitty information layouts. Additionally, can specify status (one exposure, outcome, latent) including status column. columns data set also joined tidy_dagitty data.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/as_tidy_dagitty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert objects into tidy_dagitty objects — as_tidy_dagitty","text":"","code":"as_tidy_dagitty(x, ...)  # S3 method for class 'dagitty' as_tidy_dagitty(x, seed = NULL, layout = \"nicely\", ...)  # S3 method for class 'data.frame' as_tidy_dagitty(   x,   exposure = NULL,   outcome = NULL,   latent = NULL,   labels = NULL,   coords = NULL,   seed = NULL,   layout = \"nicely\",   saturate = FALSE,   ... )  # S3 method for class 'list' as_tidy_dagitty(   x,   exposure = NULL,   outcome = NULL,   latent = NULL,   labels = NULL,   coords = NULL,   seed = NULL,   layout = \"time_ordered\",   ... )"},{"path":"https://r-causal.github.io/ggdag/reference/as_tidy_dagitty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert objects into tidy_dagitty objects — as_tidy_dagitty","text":"x object convert tidy_dagitty. Currently supports dagitty data.frame objects. ... optional arguments passed ggraph::create_layout() seed numeric seed reproducible layout generation layout layout available ggraph. See ggraph::create_layout() details. Alternatively, \"time_ordered\" use time_ordered_coords() algorithmically sort graph time. exposure character vector exposure (must variable name DAG) outcome character vector outcome (must variable name DAG) latent character vector latent variables (must variable name DAG) labels named character vector, labels variables DAG coords coordinates DAG nodes. Can named list data.frame columns x, y, name saturate Logical. Saturate DAG edge going every point future given node? Setting TRUE potentially lead edges present x.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/as_tidy_dagitty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert objects into tidy_dagitty objects — as_tidy_dagitty","text":"tidy_dagitty object","code":""},{"path":[]},{"path":"https://r-causal.github.io/ggdag/reference/as_tidy_dagitty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert objects into tidy_dagitty objects — as_tidy_dagitty","text":"","code":"data.frame(name = c(\"c\", \"c\", \"x\"), to = c(\"x\", \"y\", \"y\")) |>   as_tidy_dagitty() #> # DAG: #> # A `dagitty` DAG with: 3 nodes and 3 edges #> # #> # Data: #> # A tibble: 4 × 7 #>   name        x      y direction to       xend   yend #>   <chr>   <dbl>  <dbl> <fct>     <chr>   <dbl>  <dbl> #> 1 c     -0.0979 -0.125 ->        x      0.0863  0.852 #> 2 c     -0.0979 -0.125 ->        y      0.841   0.204 #> 3 x      0.0863  0.852 ->        y      0.841   0.204 #> 4 y      0.841   0.204 NA        NA    NA      NA     #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame  time_points <- list(c(\"a\", \"b\", \"c\"), \"d\", c(\"e\", \"f\", \"g\"), \"z\")  time_points |>   # create a saturated, time-ordered DAG   as_tidy_dagitty() |>   # remove the edge from `c` to `f`   dag_prune(c(\"c\" = \"f\")) #> # DAG: #> # A `dagitty` DAG with: 8 nodes and 21 edges #> # #> # Data: #> # A tibble: 22 × 7 #>    name      x     y direction to     xend  yend #>    <chr> <dbl> <int> <fct>     <chr> <dbl> <int> #>  1 a         1    -1 ->        d         2     0 #>  2 a         1    -1 ->        e         3    -1 #>  3 a         1    -1 ->        f         3     0 #>  4 a         1    -1 ->        g         3     1 #>  5 a         1    -1 ->        z         4     0 #>  6 b         1     0 ->        d         2     0 #>  7 b         1     0 ->        e         3    -1 #>  8 b         1     0 ->        f         3     0 #>  9 b         1     0 ->        g         3     1 #> 10 b         1     0 ->        z         4     0 #> # ℹ 12 more rows #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame"},{"path":"https://r-causal.github.io/ggdag/reference/canonicalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Canonicalize a DAG — Canonicalize DAGs","title":"Canonicalize a DAG — Canonicalize DAGs","text":"Takes input graph bidirected edges replaces every bidirected edge x <-> y substructure x <- L -> y, L latent variable. See dagitty::canonicalize() details. Undirected edges currently supported ggdag.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/canonicalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Canonicalize a DAG — Canonicalize DAGs","text":"","code":"node_canonical(.dag, ...)  ggdag_canonical(   .tdy_dag,   ...,   edge_type = \"link_arc\",   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = text_col,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = NULL,   label = NULL,   text = NULL,   node = deprecated(),   stylized = deprecated() )"},{"path":"https://r-causal.github.io/ggdag/reference/canonicalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Canonicalize a DAG — Canonicalize DAGs","text":".dag, .tdy_dag input graph, object class tidy_dagitty dagitty ... additional arguments passed tidy_dagitty() edge_type type edge, one \"link_arc\", \"link\", \"arc\", \"diagonal\". node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. text bare name column use geom_dag_text(). use_text = TRUE, default use name. node Deprecated. stylized Deprecated.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/canonicalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Canonicalize a DAG — Canonicalize DAGs","text":"tidy_dagitty includes L ggplot","code":""},{"path":"https://r-causal.github.io/ggdag/reference/canonicalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Canonicalize a DAG — Canonicalize DAGs","text":"","code":"dag <- dagify(y ~ x + z, x ~ ~z)  ggdag(dag)   node_canonical(dag) #> # DAG: #> # A `dagitty` DAG with: 4 nodes and 4 edges #> # Latent Variable: L1 #> # #> # Data: #> # A tibble: 5 × 7 #>   name       x       y direction to      xend   yend #>   <chr>  <dbl>   <dbl> <fct>     <chr>  <dbl>  <dbl> #> 1 L1    0.0589  0.0999 ->        x      0.993  0.763 #> 2 L1    0.0589  0.0999 ->        z      0.735 -0.826 #> 3 x     0.993   0.763  ->        y      1.67  -0.163 #> 4 y     1.67   -0.163  NA        NA    NA     NA     #> 5 z     0.735  -0.826  ->        y      1.67  -0.163 #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame ggdag_canonical(dag)"},{"path":"https://r-causal.github.io/ggdag/reference/colliders.html","id":null,"dir":"Reference","previous_headings":"","what":"Find colliders — Colliders","title":"Find colliders — Colliders","text":"Detects colliders given DAG. node_collider tags colliders ggdag_collider plots exogenous variables.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/colliders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find colliders — Colliders","text":"","code":"node_collider(.dag, as_factor = TRUE, ...)  ggdag_collider(   .tdy_dag,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )"},{"path":"https://r-causal.github.io/ggdag/reference/colliders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find colliders — Colliders","text":".dag tidy_dagitty dagitty object as_factor Logical. column factor? ... additional arguments passed tidy_dagitty() .tdy_dag tidy_dagitty dagitty object size numeric value scaling size elements DAG. allows change scale DAG without changing proportions. edge_type type edge, one \"link_arc\", \"link\", \"arc\", \"diagonal\". node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. edge_width width edges. edge_cap size edge caps (distance arrowheads node borders). arrow_length length arrows edges. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? unified_legend logical value. TRUE use_edges use_nodes TRUE, creates unified legend entry showing nodes edges single key, hides separate edge legend. creates cleaner, compact legends. Default TRUE. text bare name column use geom_dag_text(). use_text = TRUE, default use name. label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. node Deprecated. stylized Deprecated.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/colliders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find colliders — Colliders","text":"tidy_dagitty collider column colliders ggplot","code":""},{"path":"https://r-causal.github.io/ggdag/reference/colliders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find colliders — Colliders","text":"","code":"dag <- dagify(m ~ x + y, y ~ x)  node_collider(dag) #> # DAG: #> # A `dagitty` DAG with: 3 nodes and 3 edges #> # #> # Data: #> # A tibble: 4 × 8 #>   name       x      y direction to      xend    yend colliders    #>   <chr>  <dbl>  <dbl> <fct>     <chr>  <dbl>   <dbl> <fct>        #> 1 m     -0.153 0.0929 NA        NA    NA     NA      Collider     #> 2 x     -0.374 1.07   ->        m     -0.153  0.0929 Non-Collider #> 3 x     -0.374 1.07   ->        y     -1.11   0.388  Non-Collider #> 4 y     -1.11  0.388  ->        m     -0.153  0.0929 Non-Collider #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame ggdag_collider(dag)"},{"path":"https://r-causal.github.io/ggdag/reference/control_for.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust for variables and activate any biasing paths that result — Adjust for variables","title":"Adjust for variables and activate any biasing paths that result — Adjust for variables","text":"Adjust variables activate biasing paths result","code":""},{"path":"https://r-causal.github.io/ggdag/reference/control_for.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust for variables and activate any biasing paths that result — Adjust for variables","text":"","code":"control_for(.tdy_dag, var, as_factor = TRUE, activate_colliders = TRUE, ...)  adjust_for(.tdy_dag, var, as_factor = TRUE, activate_colliders = TRUE, ...)  ggdag_adjust(   .tdy_dag,   var = NULL,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 10,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   key_glyph = draw_key_dag_point,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated(),   collider_lines = TRUE )"},{"path":"https://r-causal.github.io/ggdag/reference/control_for.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust for variables and activate any biasing paths that result — Adjust for variables","text":".tdy_dag tidy_dagitty dagitty object var character vector, variable(s) adjust . as_factor Logical. column factor? activate_colliders logical. Include colliders activated adjustment? ... additional arguments passed tidy_dagitty() size numeric value scaling size elements DAG. allows change scale DAG without changing proportions. edge_type type edge, one \"link_arc\", \"link\", \"arc\", \"diagonal\". node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. edge_width width edges. edge_cap size edge caps (distance arrowheads node borders). arrow_length length arrows edges. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? key_glyph function use drawing legend key glyph nodes. NULL (default), glyph chosen automatically based unified_legend setting. provided, overrides automatic selection. Common options include draw_key_dag_point, draw_key_dag_combined, draw_key_dag_collider. text bare name column use geom_dag_text(). use_text = TRUE, default use name. label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. node Deprecated. stylized Deprecated. collider_lines logical. plot show paths activated adjusting collider?","code":""},{"path":"https://r-causal.github.io/ggdag/reference/control_for.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust for variables and activate any biasing paths that result — Adjust for variables","text":"tidy_dagitty adjusted column adjusted variables, well biasing paths arise, ggplot","code":""},{"path":"https://r-causal.github.io/ggdag/reference/control_for.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust for variables and activate any biasing paths that result — Adjust for variables","text":"","code":"dag <- dagify(m ~ a + b, x ~ a, y ~ b)  control_for(dag, var = \"m\") #> # DAG: #> # A `dagitty` DAG with: 5 nodes and 4 edges #> # Paths opened by conditioning on a collider: a <-> b, a <-> b, a <-> b, a <-> b #> # #> # Data: #> # A tibble: 11 × 9 #>    name        x     y direction to       xend   yend collider_line adjusted   #>    <chr>   <dbl> <dbl> <fct>     <chr>   <dbl>  <dbl> <lgl>         <fct>      #>  1 a     -2.79   0.602 ->        m     -1.35    0.777 FALSE         unadjusted #>  2 a     -2.79   0.602 ->        x     -4.04    0.448 FALSE         unadjusted #>  3 b      0.0868 0.953 ->        m     -1.35    0.777 FALSE         unadjusted #>  4 b      0.0868 0.953 ->        y      1.34    1.11  FALSE         unadjusted #>  5 m     -1.35   0.777 NA        NA    NA      NA     FALSE         adjusted   #>  6 x     -4.04   0.448 NA        NA    NA      NA     FALSE         unadjusted #>  7 y      1.34   1.11  NA        NA    NA      NA     FALSE         unadjusted #>  8 a     -2.79   0.602 <->       b      0.0868  0.953 TRUE          unadjusted #>  9 a     -2.79   0.602 <->       b      0.0868  0.953 TRUE          unadjusted #> 10 a     -2.79   0.602 <->       b      0.0868  0.953 TRUE          unadjusted #> 11 a     -2.79   0.602 <->       b      0.0868  0.953 TRUE          unadjusted #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame ggdag_adjust(dag, var = \"m\")"},{"path":"https://r-causal.github.io/ggdag/reference/coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Manipulate DAG coordinates — coordinates","title":"Manipulate DAG coordinates — coordinates","text":"Manipulate DAG coordinates","code":""},{"path":"https://r-causal.github.io/ggdag/reference/coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manipulate DAG coordinates — coordinates","text":"","code":"coords2df(coord_list)  coords2list(coord_df)"},{"path":"https://r-causal.github.io/ggdag/reference/coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manipulate DAG coordinates — coordinates","text":"coord_list named list coordinates coord_df data.frame columns x, y, name","code":""},{"path":"https://r-causal.github.io/ggdag/reference/coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manipulate DAG coordinates — coordinates","text":"either list data.frame DAG node coordinates","code":""},{"path":"https://r-causal.github.io/ggdag/reference/coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manipulate DAG coordinates — coordinates","text":"","code":"library(dagitty) #>  #> Attaching package: ‘dagitty’ #> The following object is masked from ‘package:tidygraph’: #>  #>     convert coords <- list(   x = c(A = 1, B = 2, D = 3, C = 3, F = 3, E = 4, G = 5, H = 5, I = 5),   y = c(A = 0, B = 0, D = 1, C = 0, F = -1, E = 0, G = 1, H = 0, I = -1) ) coord_df <- coords2df(coords) coords2list(coord_df) #> $x #> A B D C F E G H I  #> 1 2 3 3 3 4 5 5 5  #>  #> $y #>  A  B  D  C  F  E  G  H  I  #>  0  0  1  0 -1  0  1  0 -1  #>   x <- dagitty(\"dag{              G <-> H <-> I <-> G              D <- B -> C -> I <- F <- B <- A              H <- E <- C -> G <- D              }\") coordinates(x) <- coords2list(coord_df)"},{"path":"https://r-causal.github.io/ggdag/reference/d_relationship.html","id":null,"dir":"Reference","previous_headings":"","what":"D-relationship between variables — Assess d-separation between variables","title":"D-relationship between variables — Assess d-separation between variables","text":"D-separation key concept causal structural models. Variables d-separated open paths . node_d*() functions label variables d-connected d-separated. ggdag_d*() functions plot results. *_dconnected(), *_dseparated(), *_drelationship() functions essentially produce output just different ways thinking relationship. See dagitty::dseparated() details.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/d_relationship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"D-relationship between variables — Assess d-separation between variables","text":"","code":"node_dconnected(   .tdy_dag,   from = NULL,   to = NULL,   controlling_for = NULL,   as_factor = TRUE,   ... )  node_dseparated(   .tdy_dag,   from = NULL,   to = NULL,   controlling_for = NULL,   as_factor = TRUE )  node_drelationship(   .tdy_dag,   from = NULL,   to = NULL,   controlling_for = NULL,   as_factor = TRUE )  ggdag_drelationship(   .tdy_dag,   from = NULL,   to = NULL,   controlling_for = NULL,   ...,   edge_type = \"link_arc\",   size = 1,   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 10,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   key_glyph = draw_key_dag_point,   label = NULL,   text = NULL,   node = deprecated(),   stylized = deprecated(),   collider_lines = TRUE )  ggdag_dseparated(   .tdy_dag,   from = NULL,   to = NULL,   controlling_for = NULL,   ...,   edge_type = \"link_arc\",   size = 1,   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 10,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   key_glyph = draw_key_dag_point,   label = NULL,   text = NULL,   node = deprecated(),   stylized = deprecated(),   collider_lines = TRUE )  ggdag_dconnected(   .tdy_dag,   from = NULL,   to = NULL,   controlling_for = NULL,   ...,   edge_type = \"link_arc\",   size = 1,   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 10,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   key_glyph = draw_key_dag_point,   label = NULL,   text = NULL,   node = deprecated(),   stylized = deprecated(),   collider_lines = TRUE )"},{"path":"https://r-causal.github.io/ggdag/reference/d_relationship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"D-relationship between variables — Assess d-separation between variables","text":".tdy_dag tidy_dagitty dagitty object character vector starting node name(s), NULL. NULL, checks DAG exposure variable. character vector ending node name(s), NULL. NULL, checks DAG outcome variable. controlling_for set variables control . can character vector variable names, list form list(c(...)), NULL. NULL, control applied. Default NULL. as_factor Logical. column factor? ... additional arguments passed tidy_dagitty() edge_type type edge, one \"link_arc\", \"link\", \"arc\", \"diagonal\". size numeric value scaling size elements DAG. allows change scale DAG without changing proportions. node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. edge_width width edges. edge_cap size edge caps (distance arrowheads node borders). arrow_length length arrows edges. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? unified_legend logical value. TRUE use_edges use_nodes TRUE, creates unified legend entry showing nodes edges single key, hides separate edge legend. creates cleaner, compact legends. Default TRUE. key_glyph function use drawing legend key glyph nodes. NULL (default), glyph chosen automatically based unified_legend setting. provided, overrides automatic selection. Common options include draw_key_dag_point, draw_key_dag_combined, draw_key_dag_collider. label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. text bare name column use geom_dag_text(). use_text = TRUE, default use name. node Deprecated. stylized Deprecated. collider_lines Logical. paths opened conditioning colliders shown?","code":""},{"path":"https://r-causal.github.io/ggdag/reference/d_relationship.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"D-relationship between variables — Assess d-separation between variables","text":"tidy_dagitty d_relationship column variable D relationship ggplot","code":""},{"path":"https://r-causal.github.io/ggdag/reference/d_relationship.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"D-relationship between variables — Assess d-separation between variables","text":"","code":"library(ggplot2) dag <- dagify(m ~ x + y) dag |> ggdag_drelationship(\"x\", \"y\")  dag |> ggdag_drelationship(\"x\", \"y\", controlling_for = \"m\")   dag |>   node_dseparated(\"x\", \"y\") |>   ggplot(aes(x = x, y = y, xend = xend, yend = yend, shape = adjusted,              col = d_relationship)) +   geom_dag_edges() +   geom_dag_collider_edges() +   geom_dag_node() +   geom_dag_text(col = \"white\") +   theme_dag() +   scale_adjusted(include_color = FALSE)   dag |>   node_dconnected(\"x\", \"y\", controlling_for = \"m\") |>   ggplot(aes(x = x, y = y, xend = xend, yend = yend, shape = adjusted,              col = d_relationship)) +   geom_dag_edges() +   geom_dag_collider_edges() +   geom_dag_node() +   geom_dag_text(col = \"white\") +   theme_dag() +   scale_adjusted(include_color = FALSE)   dagify(m ~ x + y, m_jr ~ m) |>   tidy_dagitty(layout = \"nicely\") |>   node_dconnected(\"x\", \"y\", controlling_for = \"m_jr\") |>   ggplot(aes(x = x, y = y, xend = xend, yend = yend, shape = adjusted,              col = d_relationship)) +   geom_dag_edges() +   geom_dag_collider_edges() +   geom_dag_node() +   geom_dag_text(col = \"white\") +   theme_dag() +   scale_adjusted(include_color = FALSE)"},{"path":"https://r-causal.github.io/ggdag/reference/dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dagitty DAG — dag","title":"Create a dagitty DAG — dag","text":"convenience wrapper dagitty::dagitty().","code":""},{"path":"https://r-causal.github.io/ggdag/reference/dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dagitty DAG — dag","text":"","code":"dag(...)"},{"path":"https://r-causal.github.io/ggdag/reference/dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dagitty DAG — dag","text":"... character vector style dagitty. See dagitty::dagitty details.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dagitty DAG — dag","text":"dagitty","code":""},{"path":"https://r-causal.github.io/ggdag/reference/dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dagitty DAG — dag","text":"","code":"dag(\"{x m} -> y\") #> dag { #> m #> x #> y #> m -> y #> x -> y #> }"},{"path":"https://r-causal.github.io/ggdag/reference/dag_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Common DAG parameters — dag_params","title":"Common DAG parameters — dag_params","text":"Common DAG parameters","code":""},{"path":"https://r-causal.github.io/ggdag/reference/dag_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common DAG parameters — dag_params","text":".tdy_dag tidy_dagitty dagitty object .dag tidy_dagitty dagitty object exposure character vector, exposure variable. Default NULL, case determined DAG. outcome character vector, outcome variable. Default NULL, case determined DAG. as_factor Logical. column factor?","code":""},{"path":"https://r-causal.github.io/ggdag/reference/dag_saturate.html","id":null,"dir":"Reference","previous_headings":"","what":"Saturate or prune an existing DAG — dag_saturate","title":"Saturate or prune an existing DAG — dag_saturate","text":"dag_saturate() takes tidy DAG object , optionally using existing coordinates, saturates DAG based time ordering nodes. create saturated DAG scratch, see as_tidy_dagitty.list(). dag_prune() takes existing DAG removes edges. useful used together saturated DAG.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/dag_saturate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saturate or prune an existing DAG — dag_saturate","text":"","code":"dag_saturate(   .tdy_dag,   use_existing_coords = FALSE,   layout = \"time_ordered\",   seed = NULL,   ... )  dag_prune(.tdy_dag, edges)"},{"path":"https://r-causal.github.io/ggdag/reference/dag_saturate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saturate or prune an existing DAG — dag_saturate","text":".tdy_dag tidy_dagitty dagitty object use_existing_coords Logical, indicating whether use existing node coordinates. layout layout available ggraph. See ggraph::create_layout() details. Alternatively, \"time_ordered\" use time_ordered_coords() algorithmically sort graph time. seed numeric seed reproducible layout generation ... optional arguments passed ggraph::create_layout() edges named character vector name starting node value end node, e.g. c(\"x\" = \"y\") remove edge going x y.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/dag_saturate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Saturate or prune an existing DAG — dag_saturate","text":"tidy_dagitty object","code":""},{"path":[]},{"path":"https://r-causal.github.io/ggdag/reference/dag_saturate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saturate or prune an existing DAG — dag_saturate","text":"","code":"# Example usage: dag <- dagify(y ~ x, x ~ z) saturated_dag <- dag_saturate(dag)  saturated_dag |>   ggdag(edge_type = \"arc\")   saturated_dag |>   dag_prune(c(\"x\" = \"y\")) |>   ggdag(edge_type = \"arc\")"},{"path":"https://r-causal.github.io/ggdag/reference/dagify.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dagitty DAG using R-like syntax — dagify","title":"Create a dagitty DAG using R-like syntax — dagify","text":"dagify() creates dagitty DAGs using R-like syntax. currently accepts formulas usual R style, e.g. y ~ x + z, gets translated y <- {x z}, well using double tilde (~~) graph bidirected variables, e.g. x1 ~~ x2 translated x1 <-> x2.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/dagify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dagitty DAG using R-like syntax — dagify","text":"","code":"dagify(   ...,   exposure = NULL,   outcome = NULL,   latent = NULL,   labels = NULL,   coords = NULL )"},{"path":"https://r-causal.github.io/ggdag/reference/dagify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dagitty DAG using R-like syntax — dagify","text":"... formulas, converted dagitty syntax exposure character vector exposure (must variable name DAG) outcome character vector outcome (must variable name DAG) latent character vector latent variables (must variable name DAG) labels named character vector, labels variables DAG coords coordinates DAG nodes. Can named list data.frame columns x, y, name","code":""},{"path":"https://r-causal.github.io/ggdag/reference/dagify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dagitty DAG using R-like syntax — dagify","text":"dagitty DAG","code":""},{"path":[]},{"path":"https://r-causal.github.io/ggdag/reference/dagify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dagitty DAG using R-like syntax — dagify","text":"","code":"dagify(y ~ x + z, x ~ z) #> dag { #> x #> y #> z #> x -> y #> z -> x #> z -> y #> }  coords <- list(   x = c(A = 1, B = 2, D = 3, C = 3, F = 3, E = 4, G = 5, H = 5, I = 5),   y = c(A = 0, B = 0, D = 1, C = 0, F = -1, E = 0, G = 1, H = 0, I = -1) )  dag <- dagify(   G ~ ~H,   G ~ ~I,   I ~ ~G,   H ~ ~I,   D ~ B,   C ~ B,   I ~ C + F,   F ~ B,   B ~ A,   H ~ E,   C ~ E + G,   G ~ D,   coords = coords )  dagitty::is.dagitty(dag) #> [1] TRUE  ggdag(dag)   dag2 <- dagify(   y ~ x + z2 + w2 + w1,   x ~ z1 + w1,   z1 ~ w1 + v,   z2 ~ w2 + v,   w1 ~ ~w2,   exposure = \"x\",   outcome = \"y\" )  ggdag(dag2)"},{"path":"https://r-causal.github.io/ggdag/reference/dot-validate_query_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal helper functions — .validate_query_input","title":"Internal helper functions — .validate_query_input","text":"Internal helper functions","code":""},{"path":"https://r-causal.github.io/ggdag/reference/dot-validate_query_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal helper functions — .validate_query_input","text":"","code":".validate_query_input(.tdy_dag, arg_name = \".tdy_dag\")"},{"path":"https://r-causal.github.io/ggdag/reference/dplyr.html","id":null,"dir":"Reference","previous_headings":"","what":"Dplyr verb methods for tidy_dagitty objects — dplyr","title":"Dplyr verb methods for tidy_dagitty objects — dplyr","text":"Dplyr verb methods tidy_dagitty objects.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/dplyr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dplyr verb methods for tidy_dagitty objects — dplyr","text":"","code":"# S3 method for class 'tidy_dagitty' select(.data, ...)  # S3 method for class 'tidy_dagitty' filter(.data, ...)  # S3 method for class 'tidy_dagitty' mutate(.data, ...)  # S3 method for class 'tidy_dagitty' summarise(.data, ...)  # S3 method for class 'tidy_dagitty' arrange(.data, ...)  # S3 method for class 'tidy_dagitty' group_by(.data, ...)  # S3 method for class 'tidy_dagitty' ungroup(x, ...)  # S3 method for class 'tidy_dagitty' transmute(.data, ...)  # S3 method for class 'tidy_dagitty' distinct(.data, ..., .keep_all = FALSE)  # S3 method for class 'tidy_dagitty' full_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)  # S3 method for class 'tidy_dagitty' inner_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)  # S3 method for class 'tidy_dagitty' left_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)  # S3 method for class 'tidy_dagitty' right_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)  # S3 method for class 'tidy_dagitty' anti_join(x, y, by = NULL, copy = FALSE, ...)  # S3 method for class 'tidy_dagitty' semi_join(x, y, by = NULL, copy = FALSE, ...)  # S3 method for class 'tidy_dagitty' slice(.data, ..., .dots = list())  # S3 method for class 'tidy_dagitty' select_(.data, ..., .dots = list())  # S3 method for class 'tidy_dagitty' filter_(.data, ..., .dots = list())  # S3 method for class 'tidy_dagitty' mutate_(.data, ..., .dots = list())  # S3 method for class 'tidy_dagitty' summarise_(.data, ..., .dots = list())  # S3 method for class 'tidy_dagitty' arrange_(.data, ..., .dots = list())  # S3 method for class 'tidy_dagitty' slice_(.data, ..., .dots = list())"},{"path":"https://r-causal.github.io/ggdag/reference/dplyr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dplyr verb methods for tidy_dagitty objects — dplyr","text":".data data object class tidy_dagitty ... arguments passed dplyr function .dots, x, y, , copy, suffix, .keep_all see corresponding function package dplyr","code":""},{"path":"https://r-causal.github.io/ggdag/reference/dplyr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dplyr verb methods for tidy_dagitty objects — dplyr","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union tidy_dagitty(m_bias()) |>   group_by(name) |>   summarize(n = n()) #> # A tibble: 5 × 2 #>   name      n #>   <chr> <int> #> 1 a         2 #> 2 b         2 #> 3 m         1 #> 4 x         1 #> 5 y         1"},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_collider.html","id":null,"dir":"Reference","previous_headings":"","what":"Collider pattern legend key (many-to-one) — draw_key_dag_collider","title":"Collider pattern legend key (many-to-one) — draw_key_dag_collider","text":"custom legend key function displays collider pattern two nodes pointing one central node. particularly useful visualizing collider relationships DAGs.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_collider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collider pattern legend key (many-to-one) — draw_key_dag_collider","text":"","code":"draw_key_dag_collider(data, params, size)"},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_collider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collider pattern legend key (many-to-one) — draw_key_dag_collider","text":"data data frame containing aesthetic information legend key params Additional parameters (currently used) size Legend key size (currently used)","code":""},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_collider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collider pattern legend key (many-to-one) — draw_key_dag_collider","text":"grob object legend key","code":""},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_combined.html","id":null,"dir":"Reference","previous_headings":"","what":"Combined DAG legend key (horizontal node-edge-node) — draw_key_dag_combined","title":"Combined DAG legend key (horizontal node-edge-node) — draw_key_dag_combined","text":"custom legend key function displays complete DAG representation showing two nodes connected arrow. provides unified legend entry plots show nodes edges.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_combined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combined DAG legend key (horizontal node-edge-node) — draw_key_dag_combined","text":"","code":"draw_key_dag_combined(data, params, size)"},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_combined.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combined DAG legend key (horizontal node-edge-node) — draw_key_dag_combined","text":"data data frame containing aesthetic information legend key params Additional parameters (currently used) size Legend key size (currently used)","code":""},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_combined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combined DAG legend key (horizontal node-edge-node) — draw_key_dag_combined","text":"grob object legend key","code":""},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"DAG edge legend key (arrow only) — draw_key_dag_edge","title":"DAG edge legend key (arrow only) — draw_key_dag_edge","text":"custom legend key function displays arrow (edge) without nodes. appropriate edge-specific legends nodes relevant.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAG edge legend key (arrow only) — draw_key_dag_edge","text":"","code":"draw_key_dag_edge(data, params, size)"},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DAG edge legend key (arrow only) — draw_key_dag_edge","text":"data data frame containing aesthetic information legend key params Additional parameters (currently used) size Legend key size (currently used)","code":""},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_edge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DAG edge legend key (arrow only) — draw_key_dag_edge","text":"grob object legend key","code":""},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_point.html","id":null,"dir":"Reference","previous_headings":"","what":"DAG point legend key (25% size) — draw_key_dag_point","title":"DAG point legend key (25% size) — draw_key_dag_point","text":"custom legend key function draws points 25% normal size proportionally sized legend boxes. creates much compact legends maintaining visual clarity.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAG point legend key (25% size) — draw_key_dag_point","text":"","code":"draw_key_dag_point(data, params, size)"},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DAG point legend key (25% size) — draw_key_dag_point","text":"data data frame containing aesthetic information legend key params Additional parameters (currently used) size Legend key size (currently used)","code":""},{"path":"https://r-causal.github.io/ggdag/reference/draw_key_dag_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DAG point legend key (25% size) — draw_key_dag_point","text":"grob object legend key","code":""},{"path":"https://r-causal.github.io/ggdag/reference/edge_backdoor.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify DAG edges as backdoor or direct — edge_backdoor","title":"Classify DAG edges as backdoor or direct — edge_backdoor","text":"edge_backdoor() identifies edges backdoor paths direct causal paths exposure outcome. function adds edge-level information tidy DAG object, classifying edge based types paths appears .","code":""},{"path":"https://r-causal.github.io/ggdag/reference/edge_backdoor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify DAG edges as backdoor or direct — edge_backdoor","text":"","code":"edge_backdoor(   .dag,   from = NULL,   to = NULL,   adjust_for = NULL,   open_only = TRUE,   ... )"},{"path":"https://r-causal.github.io/ggdag/reference/edge_backdoor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify DAG edges as backdoor or direct — edge_backdoor","text":".dag tidy_dagitty dagitty object character vector starting node name(s), NULL. NULL, checks DAG exposure variable. character vector ending node name(s), NULL. NULL, checks DAG outcome variable. adjust_for character vector, set variables control . Default NULL. open_only logical. TRUE (default), considers open paths. FALSE, includes information closed paths well. ... additional arguments passed tidy_dagitty()","code":""},{"path":"https://r-causal.github.io/ggdag/reference/edge_backdoor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify DAG edges as backdoor or direct — edge_backdoor","text":"tidy_dagitty object additional columns: path_type: \"backdoor\", \"direct\", \"\" classification edge open: logical indicating edge part open path","code":""},{"path":"https://r-causal.github.io/ggdag/reference/edge_backdoor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify DAG edges as backdoor or direct — edge_backdoor","text":"Edges classified examining paths exposure outcome: Direct edges appear directed causal paths Backdoor edges appear backdoor paths edges appear direct backdoor paths open_only = TRUE (default), path_type NA edges part closed paths.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/edge_backdoor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify DAG edges as backdoor or direct — edge_backdoor","text":"","code":"# Create a DAG with both direct and backdoor paths dag <- dagify(   y ~ x + z,   x ~ z,   exposure = \"x\",   outcome = \"y\" )  # Classify edges edge_backdoor(dag) #> # DAG: #> # A `dagitty` DAG with: 3 nodes and 3 edges #> # Exposure: x #> # Outcome: y #> # #> # Data: #> # A tibble: 4 × 9 #>   name       x       y direction to       xend    yend path_type open  #>   <chr>  <dbl>   <dbl> <fct>     <chr>   <dbl>   <dbl> <chr>     <lgl> #> 1 x     0.0682 -0.0250 ->        y      0.939  -0.506  direct    TRUE  #> 2 y     0.939  -0.506  NA        NA    NA      NA      NA        NA    #> 3 z     0.0871 -1.02   ->        x      0.0682 -0.0250 backdoor  TRUE  #> 4 z     0.0871 -1.02   ->        y      0.939  -0.506  backdoor  TRUE  #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame  # Include closed paths edge_backdoor(dag, open_only = FALSE) #> # DAG: #> # A `dagitty` DAG with: 3 nodes and 3 edges #> # Exposure: x #> # Outcome: y #> # #> # Data: #> # A tibble: 4 × 9 #>   name        x      y direction to       xend   yend path_type open  #>   <chr>   <dbl>  <dbl> <fct>     <chr>   <dbl>  <dbl> <chr>     <lgl> #> 1 x     -0.0289 -0.516 ->        y      0.447   0.369 direct    TRUE  #> 2 y      0.447   0.369 NA        NA    NA      NA     NA        NA    #> 3 z      0.976  -0.486 ->        x     -0.0289 -0.516 backdoor  TRUE  #> 4 z      0.976  -0.486 ->        y      0.447   0.369 backdoor  TRUE  #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame"},{"path":"https://r-causal.github.io/ggdag/reference/equivalent.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating Equivalent Models — Equivalent DAGs and Classes","title":"Generating Equivalent Models — Equivalent DAGs and Classes","text":"Returns set complete partially directed acyclic graphs (CPDAGs) given input DAG. CPDAGs Markov equivalent input graph. See dagitty::equivalentDAGs() details. node_equivalent_dags() returns set DAGs, node_equivalent_class() tags reversable edges. ggdag_equivalent_dags() plots equivalent DAGs, ggdag_equivalent_class() plots reversable edges undirected.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/equivalent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating Equivalent Models — Equivalent DAGs and Classes","text":"","code":"node_equivalent_dags(.dag, n = 100, layout = \"auto\", ...)  ggdag_equivalent_dags(   .tdy_dag,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   key_glyph = NULL,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )  node_equivalent_class(.dag, layout = \"auto\")  ggdag_equivalent_class(   .tdy_dag,   ...,   size = 1,   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   key_glyph = NULL,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )"},{"path":"https://r-causal.github.io/ggdag/reference/equivalent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating Equivalent Models — Equivalent DAGs and Classes","text":".dag input graph, object class tidy_dagitty dagitty n maximal number returned graphs. layout layout available ggraph. See ggraph::create_layout() details. Alternatively, \"time_ordered\" use time_ordered_coords() algorithmically sort graph time. ... optional arguments passed ggraph::create_layout() .tdy_dag tidy_dagitty dagitty object size numeric value scaling size elements DAG. allows change scale DAG without changing proportions. edge_type type edge, one \"link_arc\", \"link\", \"arc\", \"diagonal\". node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. edge_width width edges. edge_cap size edge caps (distance arrowheads node borders). arrow_length length arrows edges. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? unified_legend logical value. TRUE use_edges use_nodes TRUE, creates unified legend entry showing nodes edges single key, hides separate edge legend. creates cleaner, compact legends. Default TRUE. key_glyph function use drawing legend key glyph nodes. NULL (default), glyph chosen automatically based unified_legend setting. provided, overrides automatic selection. Common options include draw_key_dag_point, draw_key_dag_combined, draw_key_dag_collider. text bare name column use geom_dag_text(). use_text = TRUE, default use name. label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. node Deprecated. stylized Deprecated.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/equivalent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating Equivalent Models — Equivalent DAGs and Classes","text":"tidy_dagitty least one DAG, including dag column identify graph set equivalent DAGs reversable column equivalent classes, ggplot","code":""},{"path":"https://r-causal.github.io/ggdag/reference/equivalent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating Equivalent Models — Equivalent DAGs and Classes","text":"","code":"g_ex <- dagify(y ~ x + z, x ~ z)  g_ex |> node_equivalent_class() #> # DAG: #> # A `dagitty` DAG with: 3 nodes and 3 edges #> # #> # Data: #> # A tibble: 4 × 8 #>   name      x     y direction to     xend  yend reversable #>   <chr> <dbl> <dbl> <fct>     <chr> <dbl> <dbl> <lgl>      #> 1 x       0       2 ->        y       0.5     1 TRUE       #> 2 y       0.5     1 NA        NA     NA      NA FALSE      #> 3 z       0.5     3 ->        x       0       2 TRUE       #> 4 z       0.5     3 ->        y       0.5     1 TRUE       #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame  g_ex |> ggdag_equivalent_dags()"},{"path":"https://r-causal.github.io/ggdag/reference/exogenous.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Exogenous Variables — Exogenous Variables","title":"Find Exogenous Variables — Exogenous Variables","text":"node_exogenous tags exogenous variables given exposure outcome. ggdag_exogenous plots exogenous variables. See dagitty::exogenousVariables() details.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/exogenous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Exogenous Variables — Exogenous Variables","text":"","code":"node_exogenous(.dag, ...)  ggdag_exogenous(   .tdy_dag,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )"},{"path":"https://r-causal.github.io/ggdag/reference/exogenous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Exogenous Variables — Exogenous Variables","text":".dag, .tdy_dag input graph, object class tidy_dagitty dagitty ... additional arguments passed tidy_dagitty() size numeric value scaling size elements DAG. allows change scale DAG without changing proportions. edge_type type edge, one \"link_arc\", \"link\", \"arc\", \"diagonal\". node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. edge_width width edges. edge_cap size edge caps (distance arrowheads node borders). arrow_length length arrows edges. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? unified_legend logical value. TRUE use_edges use_nodes TRUE, creates unified legend entry showing nodes edges single key, hides separate edge legend. creates cleaner, compact legends. Default TRUE. text bare name column use geom_dag_text(). use_text = TRUE, default use name. label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. node Deprecated. stylized Deprecated.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/exogenous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Exogenous Variables — Exogenous Variables","text":"tidy_dagitty exogenous column exogenous variables ggplot","code":""},{"path":"https://r-causal.github.io/ggdag/reference/exogenous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Exogenous Variables — Exogenous Variables","text":"","code":"dag <- dagify(y ~ x1 + x2 + x3, b ~ x1 + x2) ggdag_exogenous(dag)  node_exogenous(dag) #> # DAG: #> # A `dagitty` DAG with: 5 nodes and 5 edges #> # #> # Data: #> # A tibble: 7 × 8 #>   name       x       y direction to      xend    yend exogenous #>   <chr>  <dbl>   <dbl> <fct>     <chr>  <dbl>   <dbl> <chr>     #> 1 b     -0.893 -0.0145 NA        NA    NA     NA      NA        #> 2 x1    -1.70  -0.857  ->        b     -0.893 -0.0145 exogenous #> 3 x1    -1.70  -0.857  ->        y     -1.10  -2.01   exogenous #> 4 x2    -0.277 -1.00   ->        b     -0.893 -0.0145 exogenous #> 5 x2    -0.277 -1.00   ->        y     -1.10  -2.01   exogenous #> 6 x3    -1.23  -3.34   ->        y     -1.10  -2.01   exogenous #> 7 y     -1.10  -2.01   NA        NA    NA     NA      NA        #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame"},{"path":"https://r-causal.github.io/ggdag/reference/expand_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly scale the size of a ggplot — expand_plot","title":"Quickly scale the size of a ggplot — expand_plot","text":"expand_plot() convenience function expands scales ggplot, large node sizes DAG often get clipped themes DAGs mind.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/expand_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly scale the size of a ggplot — expand_plot","text":"","code":"expand_plot(   expand_x = expansion(c(0.1, 0.1)),   expand_y = expansion(c(0.1, 0.1)) )"},{"path":"https://r-causal.github.io/ggdag/reference/expand_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly scale the size of a ggplot — expand_plot","text":"expand_x, expand_y Vector range expansion constants used add padding around data, ensure placed distance away axes. Use convenience function ggplot2::expansion() generate values expand argument.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/format.tidy_dagitty.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a tidy_dagitty object — format.tidy_dagitty","title":"Format a tidy_dagitty object — format.tidy_dagitty","text":"Format tidy_dagitty object","code":""},{"path":"https://r-causal.github.io/ggdag/reference/format.tidy_dagitty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a tidy_dagitty object — format.tidy_dagitty","text":"","code":"# S3 method for class 'tidy_dagitty' format(x, ..., n = NULL, width = NULL, n_extra = NULL)"},{"path":"https://r-causal.github.io/ggdag/reference/format.tidy_dagitty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a tidy_dagitty object — format.tidy_dagitty","text":"x object class tidy_dagitty ... optional arguments passed format n Number rows show width Width output n_extra Number extra columns print","code":""},{"path":"https://r-causal.github.io/ggdag/reference/format.tidy_dagitty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a tidy_dagitty object — format.tidy_dagitty","text":"Character vector formatted output","code":""},{"path":"https://r-causal.github.io/ggdag/reference/fortify.html","id":null,"dir":"Reference","previous_headings":"","what":"Fortify a tidy_dagitty object for ggplot2 — fortify","title":"Fortify a tidy_dagitty object for ggplot2 — fortify","text":"Fortify tidy_dagitty object ggplot2","code":""},{"path":"https://r-causal.github.io/ggdag/reference/fortify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fortify a tidy_dagitty object for ggplot2 — fortify","text":"","code":"# S3 method for class 'tidy_dagitty' fortify(model, data = NULL, ...)  # S3 method for class 'dagitty' fortify(model, data = NULL, ...)"},{"path":"https://r-causal.github.io/ggdag/reference/fortify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fortify a tidy_dagitty object for ggplot2 — fortify","text":"model object class tidy_dagitty dagitty data (used) ... (used)","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Add common DAG layers to a ggplot — geom_dag","title":"Add common DAG layers to a ggplot — geom_dag","text":"geom_dag() helper function adds common DAG layers ggplot. purpose geom_dag() simplify making custom DAGs. custom DAGs need basic layers, function greatly reduces typing. true geom adds many types geoms plot (default, edges, nodes, text). underlying layers, available ggdag, true geoms, usually need consistent set layers make DAG. geom_dag() provides . geom_dag() true geom, find awkward sophisticated customization. hit point, use underlying geoms directly.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add common DAG layers to a ggplot — geom_dag","text":"","code":"geom_dag(   data = NULL,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   key_glyph = NULL,   label = NULL,   text = NULL,   node = deprecated(),   stylized = deprecated() )"},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add common DAG layers to a ggplot — geom_dag","text":"data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). size numeric value scaling size elements DAG. allows change scale DAG without changing proportions. edge_type type edge, one \"link_arc\", \"link\", \"arc\", \"diagonal\". node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. edge_width width edges. edge_cap size edge caps (distance arrowheads node borders). arrow_length length arrows edges. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? unified_legend logical value. TRUE use_edges use_nodes TRUE, creates unified legend entry showing nodes edges single key, hides separate edge legend. creates cleaner, compact legends. Default TRUE. key_glyph function use drawing legend key glyph nodes. NULL (default), glyph chosen automatically based unified_legend setting. provided, overrides automatic selection. Common options include draw_key_dag_point, draw_key_dag_combined, draw_key_dag_collider. label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. text bare name column use geom_dag_text(). use_text = TRUE, default use name. node Deprecated. stylized Deprecated.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add common DAG layers to a ggplot — geom_dag","text":"list ggplot2 layer elements","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add common DAG layers to a ggplot — geom_dag","text":"","code":"# Basic usage with ggdag library(ggplot2) dag <- dagify(y ~ x, z ~ y) ggplot(dag, aes_dag()) +   geom_dag()  ggplot(dag, aes_dag()) +   geom_dag(size = 1.5)  ggplot(dag, aes_dag()) +   geom_dag(size = 1.5, text_size = 8)"},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_collider_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Edges for paths activated by stratification on colliders — geom_dag_collider_edges","title":"Edges for paths activated by stratification on colliders — geom_dag_collider_edges","text":"Adjusting collider activates pathways parent collider. geom adds curved edge parent nodes.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_collider_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edges for paths activated by stratification on colliders — geom_dag_collider_edges","text":"","code":"geom_dag_collider_edges(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   linewidth = 0.6,   size = NULL,   curvature = 0.5,   angle = 90,   ncp = 5,   arrow = NULL,   lineend = \"butt\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_collider_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edges for paths activated by stratification on colliders — geom_dag_collider_edges","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. linewidth numeric vector length 1. Edge width size deprecated. Please use linewidth. curvature numeric value giving amount curvature.     Negative values produce left-hand curves, positive values     produce right-hand curves, zero produces straight line. angle numeric value 0 180,     giving amount skew control     points curve.  Values less 90 skew curve towards     start point values greater 90 skew curve     towards end point. ncp number control points used draw curve.     control points creates smoother curve. arrow specification arrow heads, created grid::arrow(). lineend Line end style (round, butt, square). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_collider_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edges for paths activated by stratification on colliders — geom_dag_collider_edges","text":"","code":"library(dagitty) library(ggplot2) dagify(m ~ a + b, x ~ a, y ~ b) |>   tidy_dagitty() |>   control_for(\"m\") |>   ggplot(aes(x = x, y = y, xend = xend, yend = yend, shape = adjusted)) +   geom_dag_edges() +   geom_dag_collider_edges() +   geom_dag_point() +   geom_dag_text() +   theme_dag() +   scale_adjusted()"},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_edge_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Directed DAG edges — DAG Edges","title":"Directed DAG edges — DAG Edges","text":"Directed DAG edges","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_edge_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Directed DAG edges — DAG Edges","text":"","code":"geom_dag_edges_link(   mapping = NULL,   data = NULL,   arrow = grid::arrow(length = grid::unit(5, \"pt\"), type = \"closed\"),   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   ... )  geom_dag_edges_arc(   mapping = NULL,   data = NULL,   curvature = 0.5,   arrow = grid::arrow(length = grid::unit(5, \"pt\"), type = \"closed\"),   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   fold = FALSE,   n = 100,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 1,   label_colour = \"black\",   label_alpha = 1,   label_parse = FALSE,   check_overlap = FALSE,   angle_calc = \"rot\",   force_flip = TRUE,   label_dodge = NULL,   label_push = NULL,   ... )  geom_dag_edges_diagonal(   mapping = NULL,   data = NULL,   position = \"identity\",   arrow = grid::arrow(length = grid::unit(5, \"pt\"), type = \"closed\"),   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   curvature = 1,   n = 100,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 1,   label_colour = \"black\",   label_alpha = 1,   label_parse = FALSE,   check_overlap = FALSE,   angle_calc = \"rot\",   force_flip = TRUE,   label_dodge = NULL,   label_push = NULL,   ... )  geom_dag_edges_fan(   mapping = NULL,   data = NULL,   position = \"identity\",   arrow = grid::arrow(length = grid::unit(5, \"pt\"), type = \"closed\"),   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   spread = 0.7,   n = 100,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 1,   label_colour = \"black\",   label_alpha = 1,   label_parse = FALSE,   check_overlap = FALSE,   angle_calc = \"rot\",   force_flip = TRUE,   label_dodge = NULL,   label_push = NULL,   ... )"},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_edge_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Directed DAG edges — DAG Edges","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame., used layer data. arrow specification arrow heads, created arrow() position Position adjustment, either string, result call position adjustment function. na.rm FALSE (default), removes missing values warning. TRUE silently removes missing values show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed ggraph::geom_edge_*() curvature bend curve. 1 approximates halfcircle 0 give straight line. Negative number change direction curve. used layout circular = FALSE. fold Logical. arcs appear side nodes despite different directions. Default FALSE. n number points create along path. lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linemitre Line mitre limit (number greater 1). label_colour colour edge label. NA use colour edge. label_alpha opacity edge label. NA use opacity edge. label_parse TRUE, labels parsed expressions displayed described grDevices::plotmath(). check_overlap TRUE, text overlaps previous text layer plotted. check_overlap happens draw time order data. Therefore data arranged label column calling geom_text(). Note argument supported geom_label(). angle_calc Either 'none', 'along', 'across'. 'none' label use angle aesthetic geom. 'along' label written along edge direction. 'across' label written across edge direction. force_flip Logical. angle_calc either 'along' 'across' label flipped head. Default TRUE. label_dodge grid::unit() giving fixed vertical shift add label case angle_calc either 'along' 'across' label_push grid::unit() giving fixed horizontal shift add label case angle_calc either 'along' 'across' spread Deprecated. Use strength instead.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_edge_functions.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Directed DAG edges — DAG Edges","text":"geom_dag_edges_link, geom_dag_edges_arc, geom_dag_edges_diagonal, geom_dag_edges_fan understand following aesthetics. Bold aesthetics required. x y xend yend edge_colour edge_width edge_linetype edge_alpha start_cap end_cap label label_pos label_size angle hjust vjust family fontface lineheight geom_dag_edges_arc geom_dag_edges_diagonal also require circular, automatically set. geom_dag_edges_fan requires , also automatically set.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_edge_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Directed DAG edges — DAG Edges","text":"","code":"library(ggplot2) p <- dagify(   y ~ x + z2 + w2 + w1,   x ~ z1 + w1,   z1 ~ w1 + v,   z2 ~ w2 + v,   L ~ w1 + w2 ) |>   ggplot(aes(x = .data$x, y = .data$y, xend = .data$xend, yend = .data$yend)) +   geom_dag_point() +   geom_dag_text() +   theme_dag()  p + geom_dag_edges_link()  p + geom_dag_edges_arc()  p + geom_dag_edges_diagonal()  p + geom_dag_edges_fan()"},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Directed and bidirected DAG edges — geom_dag_edges","title":"Directed and bidirected DAG edges — geom_dag_edges","text":"Directed bidirected DAG edges","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Directed and bidirected DAG edges — geom_dag_edges","text":"","code":"geom_dag_edges(   mapping = NULL,   data_directed = filter_direction(\"->\"),   data_bidirected = filter_direction(\"<->\"),   curvature = 0.3,   arrow_directed = grid::arrow(length = grid::unit(5, \"pt\"), type = \"closed\"),   arrow_bidirected = grid::arrow(length = grid::unit(5, \"pt\"), ends = \"both\", type =     \"closed\"),   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   fold = FALSE,   ... )"},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Directed and bidirected DAG edges — geom_dag_edges","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data_directed, data_bidirected data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame., used layer data. curvature bend curve. 1 approximates halfcircle 0 give straight line. Negative number change direction curve. used layout circular = FALSE. arrow_directed, arrow_bidirected specification arrow heads, created arrow() position Position adjustment, either string, result call position adjustment function. na.rm FALSE (default), removes missing values warning. TRUE silently removes missing values show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fold Logical. arcs appear side nodes despite different directions. Default FALSE. ... arguments passed ggraph::geom_edge_*()","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_edges.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Directed and bidirected DAG edges — geom_dag_edges","text":"geom_dag_edges understand following aesthetics. Bold aesthetics required. x y xend yend edge_colour edge_width edge_linetype edge_alpha start_cap end_cap label label_pos label_size angle hjust vjust family fontface lineheight geom_dag_edges also uses geom_dag_edges_arc, requires circular aesthetic, automatically set.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Directed and bidirected DAG edges — geom_dag_edges","text":"","code":"library(ggplot2) dagify(   y ~ x + z2 + w2 + w1,   x ~ z1 + w1,   z1 ~ w1 + v,   z2 ~ w2 + v,   w1 ~ ~w2 ) |>   ggplot(aes(x = .data$x, y = .data$y, xend = .data$xend, yend = .data$yend)) +   geom_dag_edges() +   geom_dag_point() +   geom_dag_text() +   theme_dag()"},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Node text labels — geom_dag_label","title":"Node text labels — geom_dag_label","text":"Node text labels","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Node text labels — geom_dag_label","text":"","code":"geom_dag_label(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   parse = FALSE,   nudge_x = 0,   nudge_y = 0,   check_overlap = FALSE,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Node text labels — geom_dag_label","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. jointy specified nudge_x nudge_y. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). string nameing position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. parse TRUE, labels parsed expressions displayed described ?plotmath. nudge_x, nudge_y Horizontal vertical adjustment nudge labels . Useful offsetting text points, particularly discrete scales. jointly specified position. check_overlap TRUE, text overlaps previous text layer plotted. check_overlap happens draw time order data. Therefore data arranged label column calling geom_text(). Note argument supported geom_label(). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_label.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Node text labels — geom_dag_label","text":"geom_dag_label understand following aesthetics (required aesthetics bold): x y label alpha angle colour family fontface group hjust lineheight size vjust","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Node text labels — geom_dag_label","text":"","code":"library(ggplot2) library(ggraph) g <- dagify(m ~ x + y, y ~ x)  ggdag(g, text = FALSE) + geom_dag_label() #> Warning: The `text` argument of `geom_dag()` no longer accepts logicals as of ggdag #> 0.3.0. #> ℹ Set `use_text = FALSE`. To use a variable other than node names, set `text = #>   variable_name` #> ℹ The deprecated feature was likely used in the ggdag package. #>   Please report the issue at <https://github.com/r-causal/ggdag/issues>.   g |>   tidy_dagitty() |>   ggplot(aes(x = .data$x, y = .data$y, xend = .data$xend, yend = .data$yend)) +   geom_dag_edges(aes(     start_cap = label_rect(name, padding = margin(2.5, 2.5, 2.5, 2.5, \"mm\")),     end_cap = label_rect(name, padding = margin(2.5, 2.5, 2.5, 2.5, \"mm\"))   )) +   geom_dag_label(size = 5, fill = \"black\", color = \"white\") +   theme_dag()"},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Node text — geom_dag_text","title":"Node text — geom_dag_text","text":"Node text","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Node text — geom_dag_text","text":"","code":"geom_dag_text(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   parse = FALSE,   nudge_x = 0,   nudge_y = 0,   check_overlap = FALSE,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Node text — geom_dag_text","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. jointy specified nudge_x nudge_y. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). string nameing position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. parse TRUE, labels parsed expressions displayed described ?plotmath. nudge_x, nudge_y Horizontal vertical adjustment nudge labels . Useful offsetting text points, particularly discrete scales. jointly specified position. check_overlap TRUE, text overlaps previous text layer plotted. check_overlap happens draw time order data. Therefore data arranged label column calling geom_text(). Note argument supported geom_label(). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_text.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Node text — geom_dag_text","text":"geom_dag_text understand following aesthetics (required aesthetics bold): x y label alpha angle colour family fontface group hjust lineheight size vjust","code":""},{"path":"https://r-causal.github.io/ggdag/reference/geom_dag_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Node text — geom_dag_text","text":"","code":"library(ggplot2) g <- dagify(m ~ x + y, y ~ x) g |>   tidy_dagitty() |>   ggplot(aes(x = .data$x, y = .data$y, xend = .data$xend, yend = .data$yend)) +   geom_dag_point() +   geom_dag_edges() +   geom_dag_text() +   theme_dag()"},{"path":"https://r-causal.github.io/ggdag/reference/ggdag-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggdag: Analyze and Create Elegant Directed Acyclic Graphs — ggdag-package","title":"ggdag: Analyze and Create Elegant Directed Acyclic Graphs — ggdag-package","text":"Tidy, analyze, plot directed acyclic graphs (DAGs). 'ggdag' built top 'dagitty', R package uses 'DAGitty' web tool (https://dagitty.net/) creating analyzing DAGs. 'ggdag' makes easy tidy plot 'dagitty' objects using 'ggplot2' 'ggraph', well common analytic graphical functions, determining adjustment sets node relationships.","code":""},{"path":[]},{"path":"https://r-causal.github.io/ggdag/reference/ggdag-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggdag: Analyze and Create Elegant Directed Acyclic Graphs — ggdag-package","text":"Maintainer: Malcolm Barrett malcolmbarrett@gmail.com (ORCID)","code":""},{"path":"https://r-causal.github.io/ggdag/reference/ggdag.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly plot a DAG in ggplot2 — ggdag","title":"Quickly plot a DAG in ggplot2 — ggdag","text":"ggdag() wrapper quickly plot DAGs.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/ggdag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly plot a DAG in ggplot2 — ggdag","text":"","code":"ggdag(   .tdy_dag,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   key_glyph = NULL,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )"},{"path":"https://r-causal.github.io/ggdag/reference/ggdag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly plot a DAG in ggplot2 — ggdag","text":".tdy_dag tidy_dagitty dagitty object ... additional arguments passed tidy_dagitty() size numeric value scaling size elements DAG. allows change scale DAG without changing proportions. edge_type type edge, one \"link_arc\", \"link\", \"arc\", \"diagonal\". node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. edge_width width edges. edge_cap size edge caps (distance arrowheads node borders). arrow_length length arrows edges. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? unified_legend logical value. TRUE use_edges use_nodes TRUE, creates unified legend entry showing nodes edges single key, hides separate edge legend. creates cleaner, compact legends. Default TRUE. key_glyph function use drawing legend key glyph nodes. NULL (default), glyph chosen automatically based unified_legend setting. provided, overrides automatic selection. Common options include draw_key_dag_point, draw_key_dag_combined, draw_key_dag_collider. text bare name column use geom_dag_text(). use_text = TRUE, default use name. label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. node Deprecated. stylized Deprecated.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/ggdag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly plot a DAG in ggplot2 — ggdag","text":"ggplot","code":""},{"path":[]},{"path":"https://r-causal.github.io/ggdag/reference/ggdag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly plot a DAG in ggplot2 — ggdag","text":"","code":"dag <- dagify(   y ~ x + z2 + w2 + w1,   x ~ z1 + w1,   z1 ~ w1 + v,   z2 ~ w2 + v,   w1 ~ ~w2 )  ggdag(dag)  ggdag(dag) + theme_dag()   ggdag(dagitty::randomDAG(5, .5))"},{"path":"https://r-causal.github.io/ggdag/reference/ggdag_classic.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly plot a DAG in ggplot2 — ggdag_classic","title":"Quickly plot a DAG in ggplot2 — ggdag_classic","text":"ggdag_classic() wrapper quickly plot DAGs traditional style.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/ggdag_classic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly plot a DAG in ggplot2 — ggdag_classic","text":"","code":"ggdag_classic(   .tdy_dag,   ...,   size = 8,   label_rect_size = NULL,   text_label = \"name\",   text_col = \"black\",   use_edges = TRUE )"},{"path":"https://r-causal.github.io/ggdag/reference/ggdag_classic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly plot a DAG in ggplot2 — ggdag_classic","text":".tdy_dag tidy_dagitty dagitty object ... additional arguments passed tidy_dagitty() size text size, default 8. label_rect_size specify fontsize argument ggraph::label_rect; default NULL, case scaled relative ti size text_label text variable, default \"name\" text_col text color, default \"black\" use_edges logical value whether include edges","code":""},{"path":"https://r-causal.github.io/ggdag/reference/ggdag_classic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly plot a DAG in ggplot2 — ggdag_classic","text":"ggplot","code":""},{"path":[]},{"path":"https://r-causal.github.io/ggdag/reference/ggdag_classic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly plot a DAG in ggplot2 — ggdag_classic","text":"","code":"dag <- dagify(   y ~ x + z2 + w2 + w1,   x ~ z1 + w1,   z1 ~ w1 + v,   z2 ~ w2 + v,   w1 ~ ~w2 )  ggdag_classic(dag)  ggdag_classic(dag) + theme_dag_blank()   ggdag_classic(dagitty::randomDAG(5, .5))"},{"path":"https://r-causal.github.io/ggdag/reference/ggplot.tidy_dagitty.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new ggplot — ggplot.tidy_dagitty","title":"Create a new ggplot — ggplot.tidy_dagitty","text":"Create new ggplot","code":""},{"path":"https://r-causal.github.io/ggdag/reference/ggplot.tidy_dagitty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new ggplot — ggplot.tidy_dagitty","text":"","code":"# S3 method for class 'tidy_dagitty' ggplot(data = NULL, mapping = aes(), ...)  # S3 method for class 'dagitty' ggplot(data = NULL, mapping = aes(), ...)"},{"path":"https://r-causal.github.io/ggdag/reference/ggplot.tidy_dagitty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new ggplot — ggplot.tidy_dagitty","text":"data Default dataset use plot. already data.frame, converted one fortify(). specified, must supplied layer added plot. mapping Default list aesthetic mappings use plot. specified, must supplied layer added plot. ... arguments passed methods. currently used.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/instrumental.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Instrumental Variables — Instrumental Variables","title":"Find Instrumental Variables — Instrumental Variables","text":"node_instrumental tags instrumental variables given exposure outcome. ggdag_instrumental plots instrumental variables. See dagitty::instrumentalVariables() details.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/instrumental.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Instrumental Variables — Instrumental Variables","text":"","code":"node_instrumental(.dag, exposure = NULL, outcome = NULL, ...)  ggdag_instrumental(   .tdy_dag,   exposure = NULL,   outcome = NULL,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 10,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )"},{"path":"https://r-causal.github.io/ggdag/reference/instrumental.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Instrumental Variables — Instrumental Variables","text":".dag tidy_dagitty dagitty object exposure character vector, exposure variable. Default NULL, case determined DAG. outcome character vector, outcome variable. Default NULL, case determined DAG. ... additional arguments passed tidy_dagitty() .tdy_dag tidy_dagitty dagitty object size numeric value scaling size elements DAG. allows change scale DAG without changing proportions. edge_type type edge, one \"link_arc\", \"link\", \"arc\", \"diagonal\". node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. edge_width width edges. edge_cap size edge caps (distance arrowheads node borders). arrow_length length arrows edges. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? unified_legend logical value. TRUE use_edges use_nodes TRUE, creates unified legend entry showing nodes edges single key, hides separate edge legend. creates cleaner, compact legends. Default TRUE. text bare name column use geom_dag_text(). use_text = TRUE, default use name. label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. node Deprecated. stylized Deprecated.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/instrumental.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Instrumental Variables — Instrumental Variables","text":"tidy_dagitty instrumental column instrumental variables ggplot","code":""},{"path":"https://r-causal.github.io/ggdag/reference/instrumental.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Instrumental Variables — Instrumental Variables","text":"","code":"library(dagitty)  node_instrumental(dagitty(\"dag{ i->x->y; x<->y }\"), \"x\", \"y\") #> # DAG: #> # A `dagitty` DAG with: 3 nodes and 3 edges #> # #> # Data: #> # A tibble: 4 × 9 #>   name        x      y direction to       xend   yend instrumental_name #>   <chr>   <dbl>  <dbl> <fct>     <chr>   <dbl>  <dbl> <chr>             #> 1 i      0.755   1.71  ->        x      0.287   0.648 i                 #> 2 x      0.287   0.648 ->        y     -0.0728 -0.173 i                 #> 3 x      0.287   0.648 <->       y     -0.0728 -0.173 i                 #> 4 y     -0.0728 -0.173 NA        NA    NA      NA     i                 #> # ℹ 1 more variable: instrumental <chr> #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame ggdag_instrumental(dagitty(\"dag{ i->x->y; i2->x->y; x<->y }\"), \"x\", \"y\")"},{"path":"https://r-causal.github.io/ggdag/reference/is.tidy_dagitty.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for object class for tidy_dagitty — is.tidy_dagitty","title":"Test for object class for tidy_dagitty — is.tidy_dagitty","text":"Test object class tidy_dagitty","code":""},{"path":"https://r-causal.github.io/ggdag/reference/is.tidy_dagitty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for object class for tidy_dagitty — is.tidy_dagitty","text":"","code":"is.tidy_dagitty(x)"},{"path":"https://r-causal.github.io/ggdag/reference/is.tidy_dagitty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for object class for tidy_dagitty — is.tidy_dagitty","text":"x object tested","code":""},{"path":"https://r-causal.github.io/ggdag/reference/is_collider.html","id":null,"dir":"Reference","previous_headings":"","what":"Detecting colliders in DAGs — Test if Variable Is Collider","title":"Detecting colliders in DAGs — Test if Variable Is Collider","text":"Detecting colliders DAGs","code":""},{"path":"https://r-causal.github.io/ggdag/reference/is_collider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detecting colliders in DAGs — Test if Variable Is Collider","text":"","code":"is_collider(.dag, .var, downstream = TRUE)  is_downstream_collider(.dag, .var)"},{"path":"https://r-causal.github.io/ggdag/reference/is_collider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detecting colliders in DAGs — Test if Variable Is Collider","text":".dag input graph, object class tidy_dagitty dagitty .var character vector length 1, potential collider check downstream Logical. Check downstream colliders? Default TRUE.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/is_collider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detecting colliders in DAGs — Test if Variable Is Collider","text":"Logical. variable collider downstream collider?","code":""},{"path":"https://r-causal.github.io/ggdag/reference/is_collider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detecting colliders in DAGs — Test if Variable Is Collider","text":"","code":"dag <- dagify(m ~ x + y, m_jr ~ m) is_collider(dag, \"m\") #> [1] TRUE is_downstream_collider(dag, \"m_jr\") #> [1] TRUE  #  a downstream collider is also treated as a collider is_collider(dag, \"m_jr\") #> [1] TRUE  #  but a direct collider is not treated as a downstream collider is_downstream_collider(dag, \"m\") #> [1] FALSE"},{"path":"https://r-causal.github.io/ggdag/reference/is_confounder.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess if a variable confounds a relationship — is_confounder","title":"Assess if a variable confounds a relationship — is_confounder","text":"Assess variable confounds relationship","code":""},{"path":"https://r-causal.github.io/ggdag/reference/is_confounder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess if a variable confounds a relationship — is_confounder","text":"","code":"is_confounder(.tdy_dag, z, x, y, direct = FALSE)"},{"path":"https://r-causal.github.io/ggdag/reference/is_confounder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess if a variable confounds a relationship — is_confounder","text":".tdy_dag tidy_dagitty dagitty object z character vector, potential confounder x, y character vector, variables z may confound. direct logical. consider direct confounding? Default FALSE","code":""},{"path":"https://r-causal.github.io/ggdag/reference/is_confounder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess if a variable confounds a relationship — is_confounder","text":"Logical. variable confounder?","code":""},{"path":"https://r-causal.github.io/ggdag/reference/is_confounder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess if a variable confounds a relationship — is_confounder","text":"","code":"dag <- dagify(y ~ z, x ~ z)  is_confounder(dag, \"z\", \"x\", \"y\") #> [1] TRUE is_confounder(dag, \"x\", \"z\", \"y\") #> [1] FALSE"},{"path":"https://r-causal.github.io/ggdag/reference/label.html","id":null,"dir":"Reference","previous_headings":"","what":"DAG labels — DAG Labels","title":"DAG labels — DAG Labels","text":"Label otherwise retrieve labels objects either class tidy_dagitty dagitty","code":""},{"path":"https://r-causal.github.io/ggdag/reference/label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAG labels — DAG Labels","text":"","code":"label(x) <- value  # S3 method for class 'dagitty' label(x) <- value  # S3 method for class 'tidy_dagitty' label(x) <- value  dag_label(.tdy_dag, labels = NULL)  label(.tdy_dag)  has_labels(.tdy_dag)"},{"path":"https://r-causal.github.io/ggdag/reference/label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DAG labels — DAG Labels","text":"x object either class tidy_dagitty dagitty value character vector .tdy_dag tidy_dagitty dagitty object labels character vector","code":""},{"path":"https://r-causal.github.io/ggdag/reference/label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DAG labels — DAG Labels","text":"label returns label attribute x","code":""},{"path":"https://r-causal.github.io/ggdag/reference/label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DAG labels — DAG Labels","text":"","code":"labelled_dag <- dagify(y ~ z, x ~ z) |>   tidy_dagitty() |>   dag_label(labels = c(\"x\" = \"exposure\", \"y\" = \"outcome\", \"z\" = \"confounder\"))  has_labels(labelled_dag) #> [1] FALSE"},{"path":"https://r-causal.github.io/ggdag/reference/node_point.html","id":null,"dir":"Reference","previous_headings":"","what":"DAG Nodes — Nodes","title":"DAG Nodes — Nodes","text":"geom_dag_node geom_dag_point similar ggplot2::geom_point defaults changed. geom_dag_node slightly stylized includes internal white circle, geom_dag_point plots single point.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/node_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAG Nodes — Nodes","text":"","code":"geom_dag_node(   mapping = NULL,   data = NULL,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   key_glyph = NULL )  geom_dag_point(   mapping = NULL,   data = NULL,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   key_glyph = NULL )"},{"path":"https://r-causal.github.io/ggdag/reference/node_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DAG Nodes — Nodes","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). key_glyph function use drawing legend key glyph nodes. NULL (default), glyph chosen automatically based unified_legend setting. provided, overrides automatic selection. Common options include draw_key_dag_point, draw_key_dag_combined, draw_key_dag_collider.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/node_point.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"DAG Nodes — Nodes","text":"geom_dag_node geom_dag_point understand following aesthetics (required aesthetics bold): x y alpha colour fill shape size stroke filter geom_dag_node also accepts: internal_colour","code":""},{"path":"https://r-causal.github.io/ggdag/reference/node_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DAG Nodes — Nodes","text":"","code":"library(ggplot2) g <- dagify(m ~ x + y, y ~ x) p <- g |>   tidy_dagitty() |>   ggplot(aes(x = .data$x, y = .data$y, xend = .data$xend, yend = .data$yend)) +   geom_dag_edges() +   theme_dag()  p +   geom_dag_node() +   geom_dag_text()   p +   geom_dag_point() +   geom_dag_text()"},{"path":"https://r-causal.github.io/ggdag/reference/path_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Path-related parameters — path_params","title":"Path-related parameters — path_params","text":"Path-related parameters","code":""},{"path":"https://r-causal.github.io/ggdag/reference/path_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Path-related parameters — path_params","text":"character vector starting node name(s), NULL. NULL, checks DAG exposure variable. character vector ending node name(s), NULL. NULL, checks DAG outcome variable. controlling_for set variables control . can character vector variable names, list form list(c(...)), NULL. NULL, control applied. Default NULL. collider_lines Logical. paths opened conditioning colliders shown?","code":""},{"path":"https://r-causal.github.io/ggdag/reference/paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Open Paths Between Variables — Pathways","title":"Find Open Paths Between Variables — Pathways","text":"dag_paths finds open paths given exposure outcome. ggdag_paths ggdag_paths_fan plot open paths. See dagitty::paths() details.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Open Paths Between Variables — Pathways","text":"","code":"dag_paths(   .dag,   from = NULL,   to = NULL,   adjust_for = NULL,   limit = 100,   directed = FALSE,   paths_only = FALSE,   ... )  ggdag_paths(   .tdy_dag,   from = NULL,   to = NULL,   adjust_for = NULL,   limit = 100,   directed = FALSE,   shadow = TRUE,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )  ggdag_paths_fan(   .tdy_dag,   from = NULL,   to = NULL,   adjust_for = NULL,   limit = 100,   directed = FALSE,   ...,   shadow = TRUE,   spread = 0.7,   size = 1,   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )"},{"path":"https://r-causal.github.io/ggdag/reference/paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Open Paths Between Variables — Pathways","text":".dag tidy_dagitty dagitty object character vector starting node name(s), NULL. NULL, checks DAG exposure variable. character vector ending node name(s), NULL. NULL, checks DAG outcome variable. adjust_for character vector, set variables control . Default NULL. limit maximum amount paths show. general, number paths grows exponentially number variables graph, path inspection useful except simple models. directed logical. directed paths shown? paths_only logical. open paths returned? Default FALSE, includes every variable edge DAG regardless part path. ... additional arguments passed tidy_dagitty() .tdy_dag tidy_dagitty dagitty object shadow logical. Show edges open path? size numeric value scaling size elements DAG. allows change scale DAG without changing proportions. edge_type type edge, one \"link_arc\", \"link\", \"arc\", \"diagonal\". node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. edge_width width edges. edge_cap size edge caps (distance arrowheads node borders). arrow_length length arrows edges. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? text bare name column use geom_dag_text(). use_text = TRUE, default use name. label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. node Deprecated. stylized Deprecated. spread width fan spread unified_legend logical value. TRUE use_edges use_nodes TRUE, creates unified legend entry showing nodes edges single key, hides separate edge legend. creates cleaner, compact legends. Default TRUE.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Open Paths Between Variables — Pathways","text":"tidy_dagitty path column path variables, set grouping column, path_type column classifying paths \"backdoor\" \"direct\", ggplot.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Open Paths Between Variables — Pathways","text":"","code":"confounder_triangle(x_y_associated = TRUE) |>   dag_paths(from = \"x\", to = \"y\") #> # DAG: #> # A `dagitty` DAG with: 3 nodes and 3 edges #> # Exposure: x #> # Outcome: y #> # Paths: 2 open paths: {x -> y}, {x <- z -> y} #> # #> # Data: #> # A tibble: 9 × 10 #>   set   name      x     y direction to     xend  yend path      path_type #>   <chr> <chr> <int> <int> <fct>     <chr> <int> <int> <chr>     <chr>     #> 1 1     x         0     0 ->        y         2     0 open path direct    #> 2 1     y         2     0 NA        NA       NA    NA open path direct    #> 3 1     z         1     1 ->        x         0     0 NA        NA        #> 4 1     z         1     1 ->        y         2     0 NA        NA        #> 5 2     x         0     0 ->        y         2     0 NA        NA        #> 6 2     y         2     0 NA        NA       NA    NA open path backdoor  #> 7 2     z         1     1 ->        x         0     0 open path backdoor  #> 8 2     z         1     1 ->        y         2     0 open path backdoor  #> 9 2     x         0     0 NA        NA       NA    NA open path backdoor  #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame  confounder_triangle(x_y_associated = TRUE) |>   ggdag_paths(from = \"x\", to = \"y\")   butterfly_bias(x_y_associated = TRUE) |>   ggdag_paths_fan(shadow = TRUE)"},{"path":"https://r-causal.github.io/ggdag/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://r-causal.github.io/ggdag/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://r-causal.github.io/ggdag/reference/print.tidy_dagitty.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a tidy_dagitty — print.tidy_dagitty","title":"Print a tidy_dagitty — print.tidy_dagitty","text":"Print tidy_dagitty","code":""},{"path":"https://r-causal.github.io/ggdag/reference/print.tidy_dagitty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a tidy_dagitty — print.tidy_dagitty","text":"","code":"# S3 method for class 'tidy_dagitty' print(x, ...)"},{"path":"https://r-causal.github.io/ggdag/reference/print.tidy_dagitty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a tidy_dagitty — print.tidy_dagitty","text":"x object class tidy_dagitty ... optional arguments passed format()","code":""},{"path":"https://r-causal.github.io/ggdag/reference/pull_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull components from DAG objects — pull_dag","title":"Pull components from DAG objects — pull_dag","text":"pull_dag() pull_dag_data() generic methods pull components DAG objects, e.g. tidy_dagitty, dagitty object data frame associated . methods recommended extracting components manually, e.g. my_dag$data, internal structure objects may change time. Similarly, use update_dag() want sync data back DAG object override another DAG; use update_dag_data() update data frame. useful pull_dag_data().","code":""},{"path":"https://r-causal.github.io/ggdag/reference/pull_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull components from DAG objects — pull_dag","text":"","code":"pull_dag(x, ...)  # S3 method for class 'tidy_dagitty' pull_dag(x, ...)  # S3 method for class 'dagitty' pull_dag(x, ...)  pull_dag_data(x, ...)  # S3 method for class 'tidy_dagitty' pull_dag_data(x, ...)  # S3 method for class 'dagitty' pull_dag_data(x, ...)  update_dag_data(x) <- value  # S3 method for class 'tidy_dagitty' update_dag_data(x) <- value  update_dag(x, ...)  update_dag(x) <- value  # S3 method for class 'tidy_dagitty' update_dag(x, ...)  # S3 method for class 'tidy_dagitty' update_dag(x) <- value"},{"path":"https://r-causal.github.io/ggdag/reference/pull_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull components from DAG objects — pull_dag","text":"x tidy_dagitty dagitty object. ... dagitty objects, passed tidy_dagitty() needed, otherwise currently unused. value value set, either dagitty data.frame object, depending function.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/pull_dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull components from DAG objects — pull_dag","text":"DAG object, e.g. dagitty, data frame","code":""},{"path":"https://r-causal.github.io/ggdag/reference/pull_dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull components from DAG objects — pull_dag","text":"","code":"tidy_dagitty_obj <- dagify(y ~ x + z, x ~ z) |>   tidy_dagitty() dag <- pull_dag(tidy_dagitty_obj) dag_data <- pull_dag_data(tidy_dagitty_obj)  tidy_dagitty_obj |>   dplyr::mutate(name = toupper(name)) |>   # recreate the DAG component   update_dag() #> # DAG: #> # A `dagitty` DAG with: 4 nodes and 3 edges #> # #> # Data: #> # A tibble: 4 × 7 #>   name       x      y direction to      xend   yend #>   <chr>  <dbl>  <dbl> <fct>     <chr>  <dbl>  <dbl> #> 1 X     -0.376 0.714  ->        y      0.589  0.982 #> 2 Y      0.589 0.982  NA        NA    NA     NA     #> 3 Z      0.338 0.0129 ->        x     -0.376  0.714 #> 4 Z      0.338 0.0129 ->        y      0.589  0.982 #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame  dag_data$label <- paste0(dag_data$name, \"(observed)\") update_dag_data(tidy_dagitty_obj) <- dag_data"},{"path":"https://r-causal.github.io/ggdag/reference/query_adjustment_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Adjustment Sets — query_adjustment_sets","title":"Query Adjustment Sets — query_adjustment_sets","text":"Find adjustment sets close backdoor paths exposure outcome. Unlike dag_adjustment_sets(), function returns tibble adjustment sets list columns rather tidy_dagitty object.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_adjustment_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Adjustment Sets — query_adjustment_sets","text":"","code":"query_adjustment_sets(   .tdy_dag,   exposure = NULL,   outcome = NULL,   type = c(\"minimal\", \"canonical\", \"all\"),   effect = c(\"total\", \"direct\"),   max.results = Inf )"},{"path":"https://r-causal.github.io/ggdag/reference/query_adjustment_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Adjustment Sets — query_adjustment_sets","text":".tdy_dag tidy_dagitty dagitty object exposure character vector exposure variable names. NULL, uses exposure defined DAG. outcome character vector outcome variable names. NULL, uses outcome defined DAG. type Character string specifying type adjustment sets find. Options \"minimal\" (default), \"canonical\", \"\". effect Character string specifying effect type. Options \"total\" (default) \"direct\". max.results Maximum number adjustment sets return. Default Inf.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_adjustment_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Adjustment Sets — query_adjustment_sets","text":"tibble columns: set_id: Integer identifier adjustment set type: Type adjustment set (minimal, canonical, ) effect: Effect type (total direct) set: String representation adjustment set (e.g., \"{, b, c}\") variables: List column containing variables set","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_adjustment_sets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Adjustment Sets — query_adjustment_sets","text":"","code":"library(ggdag) dag <- dagify(   y ~ x + z,   x ~ z,   exposure = \"x\",   outcome = \"y\" )  query_adjustment_sets(dag) #> # A tibble: 1 × 5 #>   set_id type    effect set   variables    #>    <int> <chr>   <chr>  <chr> <named list> #> 1      1 minimal total  {z}   <chr [1]>"},{"path":"https://r-causal.github.io/ggdag/reference/query_ancestors.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Node Ancestors — query_ancestors","title":"Query Node Ancestors — query_ancestors","text":"Find ancestor nodes specified variables DAG.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_ancestors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Node Ancestors — query_ancestors","text":"","code":"query_ancestors(.tdy_dag, .var = NULL)"},{"path":"https://r-causal.github.io/ggdag/reference/query_ancestors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Node Ancestors — query_ancestors","text":".tdy_dag tidy_dagitty dagitty object .var Character vector variables query. NULL, returns parents nodes.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_ancestors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Node Ancestors — query_ancestors","text":"tibble columns: node: node ancestor_set: String representation ancestor nodes ancestors: List column containing ancestor nodes n_ancestors: Number ancestors","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_ancestors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Node Ancestors — query_ancestors","text":"","code":"library(ggdag) dag <- dagify(   y ~ x + z,   x ~ w )  query_ancestors(dag) #> # A tibble: 4 × 4 #>   node  ancestor_set ancestors n_ancestors #>   <chr> <chr>        <list>          <int> #> 1 w     NA           <chr [1]>           0 #> 2 x     {w}          <chr [1]>           1 #> 3 y     {w, x, z}    <chr [3]>           3 #> 4 z     NA           <chr [1]>           0 query_ancestors(dag, .var = \"y\") #> # A tibble: 1 × 4 #>   node  ancestor_set ancestors n_ancestors #>   <chr> <chr>        <list>          <int> #> 1 y     {w, x, z}    <chr [3]>           3"},{"path":"https://r-causal.github.io/ggdag/reference/query_children.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Node Children — query_children","title":"Query Node Children — query_children","text":"Find child nodes specified variables DAG.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Node Children — query_children","text":"","code":"query_children(.tdy_dag, .var = NULL)"},{"path":"https://r-causal.github.io/ggdag/reference/query_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Node Children — query_children","text":".tdy_dag tidy_dagitty dagitty object .var Character vector variables query. NULL, returns parents nodes.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Node Children — query_children","text":"tibble columns: node: node child_set: String representation child nodes children: List column containing child nodes n_children: Number children","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_children.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Node Children — query_children","text":"","code":"library(ggdag) dag <- dagify(   y ~ x + z,   x ~ w )  query_children(dag) #> # A tibble: 4 × 4 #>   node  child_set children  n_children #>   <chr> <chr>     <list>         <int> #> 1 w     {x}       <chr [1]>          1 #> 2 x     {y}       <chr [1]>          1 #> 3 y     NA        <chr [1]>          0 #> 4 z     {y}       <chr [1]>          1 query_children(dag, .var = \"x\") #> # A tibble: 1 × 4 #>   node  child_set children  n_children #>   <chr> <chr>     <list>         <int> #> 1 x     {y}       <chr [1]>          1"},{"path":"https://r-causal.github.io/ggdag/reference/query_colliders.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Collider Nodes — query_colliders","title":"Query Collider Nodes — query_colliders","text":"Identify collider nodes DAG. collider node two parents.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_colliders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Collider Nodes — query_colliders","text":"","code":"query_colliders(.tdy_dag)"},{"path":"https://r-causal.github.io/ggdag/reference/query_colliders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Collider Nodes — query_colliders","text":".tdy_dag tidy_dagitty dagitty object","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_colliders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Collider Nodes — query_colliders","text":"tibble columns: node: collider node parent_set: String representation parent nodes parents: List column containing parent nodes is_activated: Logical indicating collider conditioned ","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_colliders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Collider Nodes — query_colliders","text":"","code":"library(ggdag) dag <- dagify(   z ~ x + y,   w ~ z )  query_colliders(dag) #> # A tibble: 1 × 4 #>   node  parent_set parents   is_activated #>   <chr> <chr>      <list>    <lgl>        #> 1 z     {x, y}     <chr [2]> FALSE"},{"path":"https://r-causal.github.io/ggdag/reference/query_conditional_independence.html","id":null,"dir":"Reference","previous_headings":"","what":"Query and Test Conditional Independence in a DAG — query_conditional_independence","title":"Query and Test Conditional Independence in a DAG — query_conditional_independence","text":"query_conditional_independence() queries conditional independencies implied given DAG. serve potential robustness checks DAG. test_conditional_independence() runs tests independence implied DAG given dataset. ggdag_conditional_independence() plots results forest plot.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_conditional_independence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query and Test Conditional Independence in a DAG — query_conditional_independence","text":"","code":"query_conditional_independence(   .tdy_dag,   type = \"missing.edge\",   max.results = Inf )  test_conditional_independence(   .tdy_dag,   data = NULL,   type = c(\"cis\", \"cis.loess\", \"cis.chisq\", \"cis.pillai\", \"tetrads\", \"tetrads.within\",     \"tetrads.between\", \"tetrads.epistemic\"),   tests = NULL,   sample.cov = NULL,   sample.nobs = NULL,   conf.level = 0.95,   R = NULL,   max.conditioning.variables = NULL,   abbreviate.names = FALSE,   tol = NULL,   loess.pars = NULL )  ggdag_conditional_independence(   .test_result,   sort = TRUE,   vline_linewidth = 0.8,   vline_color = \"grey70\",   pointrange_fatten = 3 )"},{"path":"https://r-causal.github.io/ggdag/reference/query_conditional_independence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query and Test Conditional Independence in a DAG — query_conditional_independence","text":".tdy_dag tidy_dagitty dagitty object type can one \"missing.edge\", \"basis.set\", \".pairs\". first, one minimal testable implication (smallest possible conditioning set) returned per missing edge graph. \"basis.set\", one testable implication returned per vertex graph non-descendants parents. Basis sets can smaller, involve higher-dimensional independencies, whereas missing edge sets involve independencies two variables time. \".pairs\", function return list implied conditional independencies two variables time. Beware, can long list may feasible compute except small graphs. max.results integer. listing conditional independencies stopped many results found. Use Inf generate . applies type=\"missing.edge\" type=\"\". data matrix data frame containing data. tests list precise tests perform. given, list tests automatically derived input graph. Can used restrict testing certain subset tests (instance, test conditional independencies conditioning set reasonably low dimension, shown example). sample.cov sample covariance matrix; ignored data supplied. Either data sample.cov sample.nobs must supplied. sample.nobs number observations; ignored data supplied. conf.level determines size confidence intervals test statistics. R many bootstrap replicates estimating confidence intervals. NULL, confidence intervals based normal approximation. tetrads, normal approximation valid large samples even data normally distributed. max.conditioning.variables conditional independence testing,  parameter can used perform tests number conditioning variables exceed given value. High-dimensional conditional independence tests can unreliable. abbreviate.names logical. Whether abbreviate variable names (used row names returned data frame). tol bound value tolerated deviation local test value. default, perform two-sided test hypothesis theta=0. parameter given, test changes abs(theta)=tol versus abs(theta)>tol. loess.pars list parameter passed  loess   (type=\"cis.loess\"), example smoothing range. ciTest(X,Y,Z,data) convenience function test single conditional independence independently DAG. .test_result data frame containing results conditional independence tests created test_conditional_independence(). sort Logical indicating whether sort results estimate value. Default TRUE. vline_linewidth Line width vertical line indicating effect. vline_color Color vertical line. pointrange_fatten Factor fatten point range.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_conditional_independence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query and Test Conditional Independence in a DAG — query_conditional_independence","text":"Either tibble summarizing conditional independencies DAG test results, ggplot results.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_dconnected.html","id":null,"dir":"Reference","previous_headings":"","what":"Query D-connection — query_dconnected","title":"Query D-connection — query_dconnected","text":"Test whether sets variables d-connected DAG given conditioning set. complement d-separation.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_dconnected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query D-connection — query_dconnected","text":"","code":"query_dconnected(.tdy_dag, from, to, conditioned_on = NULL)"},{"path":"https://r-causal.github.io/ggdag/reference/query_dconnected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query D-connection — query_dconnected","text":".tdy_dag tidy_dagitty dagitty object Character vector nodes list node sets. Character vector nodes list node sets. conditioned_on Character vector conditioning variables.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_dconnected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query D-connection — query_dconnected","text":"tibble columns: from_set: String representation source nodes : List column source nodes to_set: String representation target nodes : List column target nodes conditioning_set: String representation conditioning variables conditioned_on: List column conditioning variables dconnected: Logical indicating d-connection","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_dconnected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query D-connection — query_dconnected","text":"","code":"library(ggdag) dag <- dagify(   y ~ x + z,   x ~ w,   z ~ w )  query_dconnected(dag, from = \"x\", to = \"z\") #> # A tibble: 1 × 7 #>   from_set from      to_set to        conditioning_set conditioned_on dconnected #>   <chr>    <list>    <chr>  <list>    <chr>            <list>         <lgl>      #> 1 {x}      <chr [1]> {z}    <chr [1]> {}               <chr [0]>      TRUE       query_dconnected(dag, from = \"x\", to = \"z\", conditioned_on = \"w\") #> # A tibble: 1 × 7 #>   from_set from      to_set to        conditioning_set conditioned_on dconnected #>   <chr>    <list>    <chr>  <list>    <chr>            <list>         <lgl>      #> 1 {x}      <chr [1]> {z}    <chr [1]> {w}              <chr [1]>      FALSE"},{"path":"https://r-causal.github.io/ggdag/reference/query_descendants.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Node Descendants — query_descendants","title":"Query Node Descendants — query_descendants","text":"Find descendant nodes specified variables DAG.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_descendants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Node Descendants — query_descendants","text":"","code":"query_descendants(.tdy_dag, .var = NULL)"},{"path":"https://r-causal.github.io/ggdag/reference/query_descendants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Node Descendants — query_descendants","text":".tdy_dag tidy_dagitty dagitty object .var Character vector variables query. NULL, returns parents nodes.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_descendants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Node Descendants — query_descendants","text":"tibble columns: node: node descendant_set: String representation descendant nodes descendants: List column containing descendant nodes n_descendants: Number descendants","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_descendants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Node Descendants — query_descendants","text":"","code":"library(ggdag) dag <- dagify(   y ~ x + z,   x ~ w )  query_descendants(dag) #> # A tibble: 4 × 4 #>   node  descendant_set descendants n_descendants #>   <chr> <chr>          <list>              <int> #> 1 w     {x, y}         <chr [2]>               2 #> 2 x     {y}            <chr [1]>               1 #> 3 y     NA             <chr [1]>               0 #> 4 z     {y}            <chr [1]>               1 query_descendants(dag, .var = \"w\") #> # A tibble: 1 × 4 #>   node  descendant_set descendants n_descendants #>   <chr> <chr>          <list>              <int> #> 1 w     {x, y}         <chr [2]>               2"},{"path":"https://r-causal.github.io/ggdag/reference/query_dseparated.html","id":null,"dir":"Reference","previous_headings":"","what":"Query D-separation — query_dseparated","title":"Query D-separation — query_dseparated","text":"Test whether sets variables d-separated DAG given conditioning set.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_dseparated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query D-separation — query_dseparated","text":"","code":"query_dseparated(.tdy_dag, from, to, conditioned_on = NULL)"},{"path":"https://r-causal.github.io/ggdag/reference/query_dseparated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query D-separation — query_dseparated","text":".tdy_dag tidy_dagitty dagitty object Character vector nodes list node sets. Character vector nodes list node sets. conditioned_on Character vector conditioning variables.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_dseparated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query D-separation — query_dseparated","text":"tibble columns: from_set: String representation source nodes : List column source nodes to_set: String representation target nodes : List column target nodes conditioning_set: String representation conditioning variables conditioned_on: List column conditioning variables dseparated: Logical indicating d-separation","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_dseparated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query D-separation — query_dseparated","text":"","code":"library(ggdag) dag <- dagify(   y ~ x + z,   x ~ w,   z ~ w )  query_dseparated(dag, from = \"x\", to = \"z\") #> # A tibble: 1 × 7 #>   from_set from      to_set to        conditioning_set conditioned_on dseparated #>   <chr>    <list>    <chr>  <list>    <chr>            <list>         <lgl>      #> 1 {x}      <chr [1]> {z}    <chr [1]> {}               <chr [0]>      FALSE      query_dseparated(dag, from = \"x\", to = \"z\", conditioned_on = \"w\") #> # A tibble: 1 × 7 #>   from_set from      to_set to        conditioning_set conditioned_on dseparated #>   <chr>    <list>    <chr>  <list>    <chr>            <list>         <lgl>      #> 1 {x}      <chr [1]> {z}    <chr [1]> {w}              <chr [1]>      TRUE"},{"path":"https://r-causal.github.io/ggdag/reference/query_exogenous.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Exogenous Variables — query_exogenous","title":"Query Exogenous Variables — query_exogenous","text":"Identify exogenous (parentless) variables DAG.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_exogenous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Exogenous Variables — query_exogenous","text":"","code":"query_exogenous(.tdy_dag)"},{"path":"https://r-causal.github.io/ggdag/reference/query_exogenous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Exogenous Variables — query_exogenous","text":".tdy_dag tidy_dagitty dagitty object","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_exogenous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Exogenous Variables — query_exogenous","text":"tibble columns: node: exogenous variable n_descendants: Number descendant nodes","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_exogenous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Exogenous Variables — query_exogenous","text":"","code":"library(ggdag) dag <- dagify(   y ~ x + z,   x ~ w )  query_exogenous(dag) #> # A tibble: 2 × 2 #>   node  n_descendants #>   <chr>         <int> #> 1 w                 2 #> 2 z                 1"},{"path":"https://r-causal.github.io/ggdag/reference/query_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Functions for DAG Analysis — query_functions","title":"Query Functions for DAG Analysis — query_functions","text":"functions provide direct analytical answers DAGs, returning tibbles results rather tidy_dagitty objects plotting.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_instrumental.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Instrumental Variables — query_instrumental","title":"Query Instrumental Variables — query_instrumental","text":"Identify instrumental variables given exposure-outcome pair.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_instrumental.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Instrumental Variables — query_instrumental","text":"","code":"query_instrumental(   .tdy_dag,   exposure = NULL,   outcome = NULL,   conditioned_on = NULL )"},{"path":"https://r-causal.github.io/ggdag/reference/query_instrumental.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Instrumental Variables — query_instrumental","text":".tdy_dag tidy_dagitty dagitty object exposure Character vector exposure variable names. NULL, uses exposure defined DAG. outcome Character vector outcome variable names. NULL, uses outcome defined DAG. conditioned_on Character vector variables must conditioned .","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_instrumental.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Instrumental Variables — query_instrumental","text":"tibble columns: instrument: instrumental variable exposure: exposure variable outcome: outcome variable conditioning_set: String representation conditioning variables conditioned_on: List column required conditioning variables","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_instrumental.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Instrumental Variables — query_instrumental","text":"","code":"library(ggdag) dag <- dagify(   y ~ x + u,   x ~ z + u,   exposure = \"x\",   outcome = \"y\",   latent = \"u\" )  query_instrumental(dag) #> # A tibble: 1 × 5 #>   instrument exposure outcome conditioning_set conditioned_on #>   <chr>      <chr>    <chr>   <chr>            <list>         #> 1 z          x        y       {}               <chr [0]>"},{"path":"https://r-causal.github.io/ggdag/reference/query_markov_blanket.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Markov Blanket — query_markov_blanket","title":"Query Markov Blanket — query_markov_blanket","text":"Find Markov blanket specified variables DAG. Markov blanket includes parents, children, parents children (co-parents).","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_markov_blanket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Markov Blanket — query_markov_blanket","text":"","code":"query_markov_blanket(.tdy_dag, .var = NULL)"},{"path":"https://r-causal.github.io/ggdag/reference/query_markov_blanket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Markov Blanket — query_markov_blanket","text":".tdy_dag tidy_dagitty dagitty object .var Character vector variables query. NULL, returns parents nodes.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_markov_blanket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Markov Blanket — query_markov_blanket","text":"tibble columns: node: node blanket: String representation Markov blanket nodes blanket_vars: List column containing Markov blanket nodes blanket_size: Size Markov blanket","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_markov_blanket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Markov Blanket — query_markov_blanket","text":"","code":"library(ggdag) dag <- dagify(   y ~ x + z,   x ~ w,   z ~ w )  query_markov_blanket(dag) #> # A tibble: 4 × 4 #>   node  blanket   blanket_vars blanket_size #>   <chr> <chr>     <list>              <int> #> 1 w     {x, z}    <chr [2]>               2 #> 2 x     {w, y, z} <chr [3]>               3 #> 3 y     {x, z}    <chr [2]>               2 #> 4 z     {w, x, y} <chr [3]>               3 query_markov_blanket(dag, .var = \"x\") #> # A tibble: 1 × 4 #>   node  blanket   blanket_vars blanket_size #>   <chr> <chr>     <list>              <int> #> 1 x     {w, y, z} <chr [3]>               3"},{"path":"https://r-causal.github.io/ggdag/reference/query_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Node Parents — query_parents","title":"Query Node Parents — query_parents","text":"Find parent nodes specified variables DAG.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Node Parents — query_parents","text":"","code":"query_parents(.tdy_dag, .var = NULL)"},{"path":"https://r-causal.github.io/ggdag/reference/query_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Node Parents — query_parents","text":".tdy_dag tidy_dagitty dagitty object .var Character vector variables query. NULL, returns parents nodes.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Node Parents — query_parents","text":"tibble columns: node: node parent_set: String representation parent nodes parents: List column containing parent nodes n_parents: Number parents","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_parents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Node Parents — query_parents","text":"","code":"library(ggdag) dag <- dagify(   y ~ x + z,   x ~ w )  query_parents(dag) #> # A tibble: 4 × 4 #>   node  parent_set parents   n_parents #>   <chr> <chr>      <list>        <int> #> 1 w     NA         <chr [1]>         0 #> 2 x     {w}        <chr [1]>         1 #> 3 y     {x, z}     <chr [2]>         2 #> 4 z     NA         <chr [1]>         0 query_parents(dag, .var = \"y\") #> # A tibble: 1 × 4 #>   node  parent_set parents   n_parents #>   <chr> <chr>      <list>        <int> #> 1 y     {x, z}     <chr [2]>         2"},{"path":"https://r-causal.github.io/ggdag/reference/query_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Paths in a DAG — query_paths","title":"Query Paths in a DAG — query_paths","text":"Find paths specified nodes DAG determine open closed given conditioning set.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Paths in a DAG — query_paths","text":"","code":"query_paths(   .tdy_dag,   from = NULL,   to = NULL,   directed = FALSE,   limit = 100,   conditioned_on = NULL )"},{"path":"https://r-causal.github.io/ggdag/reference/query_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Paths in a DAG — query_paths","text":".tdy_dag tidy_dagitty dagitty object Character vector starting nodes. NULL, uses exposure DAG. Character vector ending nodes. NULL, uses outcome DAG. directed Logical. TRUE, considers directed paths. limit Maximum number paths return. Default 100. conditioned_on Character vector variables condition .","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Paths in a DAG — query_paths","text":"tibble columns: path_id: Integer identifier path : Starting node : Ending node path: Character string representation path path_type: Character classification \"backdoor\" \"direct\" variables: List column containing variables path open: Logical indicating path open","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Paths in a DAG — query_paths","text":"","code":"library(ggdag) dag <- dagify(   y ~ x + z,   x ~ w,   z ~ w,   exposure = \"x\",   outcome = \"y\" )  query_paths(dag) #> # A tibble: 2 × 7 #>   path_id from  to    path             path_type variables open  #>     <int> <chr> <chr> <chr>            <chr>     <list>    <lgl> #> 1       1 x     y     x -> y           direct    <chr [2]> TRUE  #> 2       2 x     y     x <- w -> z -> y backdoor  <chr [4]> TRUE  query_paths(dag, conditioned_on = \"z\") #> # A tibble: 2 × 7 #>   path_id from  to    path             path_type variables open  #>     <int> <chr> <chr> <chr>            <chr>     <list>    <lgl> #> 1       1 x     y     x -> y           direct    <chr [2]> TRUE  #> 2       2 x     y     x <- w -> z -> y backdoor  <chr [4]> FALSE"},{"path":"https://r-causal.github.io/ggdag/reference/query_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Variable Status — query_status","title":"Query Variable Status — query_status","text":"Query status variables DAG (exposure, outcome, latent).","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Variable Status — query_status","text":"","code":"query_status(.tdy_dag, .var = NULL)"},{"path":"https://r-causal.github.io/ggdag/reference/query_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Variable Status — query_status","text":".tdy_dag tidy_dagitty dagitty object .var Character vector variables query. NULL, returns status nodes.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Variable Status — query_status","text":"tibble columns: name: variable name status: variable status (exposure, outcome, latent, NA)","code":""},{"path":"https://r-causal.github.io/ggdag/reference/query_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Variable Status — query_status","text":"","code":"library(ggdag) dag <- dagify(   l ~ x + y,   y ~ x,   exposure = \"x\",   outcome = \"y\",   latent = \"l\" )  query_status(dag) #> # A tibble: 3 × 2 #>   name  status   #>   <chr> <chr>    #> 1 l     latent   #> 2 x     exposure #> 3 y     outcome  query_status(dag, .var = \"x\") #> # A tibble: 1 × 2 #>   name  status   #>   <chr> <chr>    #> 1 x     exposure"},{"path":"https://r-causal.github.io/ggdag/reference/quick_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly create a DAGs with common structures of bias — Quick Plots for Common DAGs","title":"Quickly create a DAGs with common structures of bias — Quick Plots for Common DAGs","text":"base functions create object class dagitty; ggdag_*  functions wrappers also call ggdag() dagitty object.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/quick_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly create a DAGs with common structures of bias — Quick Plots for Common DAGs","text":"","code":"m_bias(   x = NULL,   y = NULL,   a = NULL,   b = NULL,   m = NULL,   x_y_associated = FALSE )  butterfly_bias(   x = NULL,   y = NULL,   a = NULL,   b = NULL,   m = NULL,   x_y_associated = FALSE )  confounder_triangle(x = NULL, y = NULL, z = NULL, x_y_associated = FALSE)  collider_triangle(x = NULL, y = NULL, m = NULL, x_y_associated = FALSE)  mediation_triangle(x = NULL, y = NULL, m = NULL, x_y_associated = FALSE)  quartet_collider(x = NULL, y = NULL, z = NULL, x_y_associated = TRUE)  quartet_confounder(x = NULL, y = NULL, z = NULL, x_y_associated = TRUE)  quartet_mediator(x = NULL, y = NULL, z = NULL, x_y_associated = FALSE)  quartet_m_bias(   x = NULL,   y = NULL,   z = NULL,   u1 = NULL,   u2 = NULL,   x_y_associated = TRUE )  quartet_time_collider(   x0 = NULL,   x1 = NULL,   x2 = NULL,   x3 = NULL,   y1 = NULL,   y2 = NULL,   y3 = NULL,   z1 = NULL,   z2 = NULL,   z3 = NULL )  ggdag_m_bias(   x = NULL,   y = NULL,   a = NULL,   b = NULL,   m = NULL,   x_y_associated = FALSE,   size = 1,   edge_type = \"link_arc\",   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )  ggdag_butterfly_bias(   x = NULL,   y = NULL,   a = NULL,   b = NULL,   m = NULL,   x_y_associated = FALSE,   size = 1,   edge_type = \"link_arc\",   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )  ggdag_confounder_triangle(   x = NULL,   y = NULL,   z = NULL,   x_y_associated = FALSE,   size = 1,   edge_type = \"link_arc\",   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )  ggdag_collider_triangle(   x = NULL,   y = NULL,   m = NULL,   x_y_associated = FALSE,   size = 1,   edge_type = \"link_arc\",   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )  ggdag_mediation_triangle(   x = NULL,   y = NULL,   m = NULL,   x_y_associated = FALSE,   size = 1,   edge_type = \"link_arc\",   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )  ggdag_quartet_collider(   x = NULL,   y = NULL,   z = NULL,   x_y_associated = TRUE,   size = 1,   edge_type = \"link_arc\",   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   text = NULL,   label = NULL )  ggdag_quartet_confounder(   x = NULL,   y = NULL,   z = NULL,   x_y_associated = TRUE,   size = 1,   edge_type = \"link_arc\",   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   text = NULL,   label = NULL )  ggdag_quartet_mediator(   x = NULL,   y = NULL,   z = NULL,   x_y_associated = FALSE,   size = 1,   edge_type = \"link_arc\",   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   text = NULL,   label = NULL )  ggdag_quartet_m_bias(   x = NULL,   y = NULL,   z = NULL,   u1 = NULL,   u2 = NULL,   x_y_associated = TRUE,   size = 1,   edge_type = \"link_arc\",   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   text = NULL,   label = NULL )  ggdag_quartet_time_collider(   x0 = NULL,   x1 = NULL,   x2 = NULL,   x3 = NULL,   y1 = NULL,   y2 = NULL,   y3 = NULL,   z1 = NULL,   z2 = NULL,   z3 = NULL,   size = 1,   edge_type = \"link_arc\",   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   text = NULL,   label = NULL )"},{"path":"https://r-causal.github.io/ggdag/reference/quick_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly create a DAGs with common structures of bias — Quick Plots for Common DAGs","text":"x, y, , b, m, z Character vector. Optional label. Default NULL x_y_associated Logical. x y associated? Default FALSE. u1, u2 Character vector. Optional label unmeasured nodes, used quartet_m_bias(). Default NULL x0, x1, x2, x3, y1, y2, y3, z1, z2, z3 Character vector. Optional labels time-indexed nodes, used quartet_time_collider(). Default NULL size numeric value scaling size elements DAG. allows change scale DAG without changing proportions. edge_type type edge, one \"link_arc\", \"link\", \"arc\", \"diagonal\". node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. edge_width width edges. edge_cap size edge caps (distance arrowheads node borders). arrow_length length arrows edges. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? text bare name column use geom_dag_text(). use_text = TRUE, default use name. label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. node Deprecated. stylized Deprecated.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/quick_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly create a DAGs with common structures of bias — Quick Plots for Common DAGs","text":"DAG class dagitty ggplot","code":""},{"path":"https://r-causal.github.io/ggdag/reference/quick_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quickly create a DAGs with common structures of bias — Quick Plots for Common DAGs","text":"quartet_* functions create DAGs represent causal quartet, four example datasets identical statistical properties different causal structures. inspired Anscombe's quartet demonstrate statistical summaries alone determine causal relationships. See Causal Inference R four structures represent different relationships exposure (x), outcome (y), covariate (z): Collider: z caused x y (adjust z) Confounder: z causes x y (must adjust z) Mediator: z causal path x y (adjust direct effect ) M-bias: z collider unmeasured confounders u1 u2 (adjust z) time-varying collider (quartet_time_collider()) demonstrates time-ordering can help identify causal relationships variables measured multiple time points.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/quick_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Quickly create a DAGs with common structures of bias — Quick Plots for Common DAGs","text":"D'Agostino McGowan L, Gerke T, Barrett M (2023). \"Causal inference just statistics problem.\" Journal Statistics Data Science Education, 32(1), 1-4. doi:10.1080/26939169.2023.2276446","code":""},{"path":"https://r-causal.github.io/ggdag/reference/quick_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly create a DAGs with common structures of bias — Quick Plots for Common DAGs","text":"","code":"m_bias() |> ggdag_adjust(\"m\")  ggdag_confounder_triangle()   # Causal Quartets ggdag_quartet_collider()  ggdag_quartet_confounder()  ggdag_quartet_mediator()  ggdag_quartet_m_bias()   # Time-varying collider ggdag_quartet_time_collider()"},{"path":"https://r-causal.github.io/ggdag/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr filter","code":""},{"path":"https://r-causal.github.io/ggdag/reference/remove_axes.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly remove plot axes and grids — remove_axes","title":"Quickly remove plot axes and grids — remove_axes","text":"remove_axes() remove_grid() convenience functions removes axes grids ggplot, respectively. useful want use existing theme, e.g. included ggplot2, DAG.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/remove_axes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly remove plot axes and grids — remove_axes","text":"","code":"remove_axes()  remove_grid()"},{"path":"https://r-causal.github.io/ggdag/reference/remove_axes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly remove plot axes and grids — remove_axes","text":"","code":"library(ggplot2) ggdag(confounder_triangle()) +   theme_bw() +   remove_axes()"},{"path":"https://r-causal.github.io/ggdag/reference/repel.html","id":null,"dir":"Reference","previous_headings":"","what":"Repulsive textual annotations — ggrepel functions","title":"Repulsive textual annotations — ggrepel functions","text":"functions minor modifications ggrepel package. geom_dag_text_repel() adds text directly plot. geom_dag_label_repel() draws rectangle underneath text, making easier read. text labels repel away away data points. geom_dag_label_repel2() slightly stylized version geom_dag_label_repel() often looks better DAGs. geom_dag_text_repel2() slightly stylized version geom_dag_text_repel() often looks better DAGs.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/repel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repulsive textual annotations — ggrepel functions","text":"","code":"geom_dag_text_repel(   mapping = NULL,   data = NULL,   parse = FALSE,   ...,   box.padding = 1.25,   point.padding = 1.5,   segment.color = \"#666666\",   fontface = \"bold\",   segment.size = 0.5,   arrow = NULL,   force = 1,   max.iter = 2000,   nudge_x = 0,   nudge_y = 0,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_dag_label_repel(   mapping = NULL,   data = NULL,   parse = FALSE,   ...,   box.padding = grid::unit(1.25, \"lines\"),   label.padding = grid::unit(0.25, \"lines\"),   point.padding = grid::unit(1.5, \"lines\"),   label.r = grid::unit(0.15, \"lines\"),   label.size = 0.25,   segment.color = \"grey50\",   segment.size = 0.5,   arrow = NULL,   force = 1,   max.iter = 2000,   nudge_x = 0,   nudge_y = 0,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_dag_label_repel2(   mapping = NULL,   data = NULL,   box.padding = 2,   max.overlaps = Inf,   label.size = NA,   ... )  geom_dag_text_repel2(   mapping = NULL,   data = NULL,   box.padding = 2,   max.overlaps = Inf,   ... )"},{"path":"https://r-causal.github.io/ggdag/reference/repel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repulsive textual annotations — ggrepel functions","text":"mapping Set aesthetic mappings created aes aes_. specified inherit.aes = TRUE (default), combined default mapping top level plot. need supply mapping mapping defined plot. data data frame. specified, overrides default data frame defined top level plot. parse TRUE, labels parsed expressions displayed described ?plotmath ... arguments passed layer.   three types arguments can use :  Aesthetics: set aesthetic fixed value, like        colour = \"red\" size = 3. arguments layer, example override       default stat associated layer. arguments passed stat. box.padding Amount padding around bounding box, unit number. Defaults 0.25. (Default unit lines, units can specified passing unit(x, \"units\")). point.padding Amount padding around labeled point, unit number. Defaults 0. (Default unit lines, units can specified passing unit(x, \"units\")). segment.color, segment.size See ggrepel::geom_text_repel() fontface character vector. Default \"bold\" arrow specification arrow heads, created arrow force Force repulsion overlapping text labels. Defaults 1. max.iter Maximum number iterations try resolve overlaps. Defaults 10000. nudge_x, nudge_y Horizontal vertical adjustments nudge starting position text label. units nudge_x nudge_y data units x-axis y-axis. na.rm FALSE (default), removes missing values warning.  TRUE silently removes missing values. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders. label.padding Amount padding around label, unit number. Defaults 0.25. (Default unit lines, units can specified passing unit(x, \"units\")). label.r Radius rounded corners, unit number. Defaults 0.15. (Default unit lines, units can specified passing unit(x, \"units\")). label.size Size label border, mm. max.overlaps Exclude text labels overlap many things. text label, count many text labels data points overlaps, exclude text label many overlaps. Defaults 10.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/repel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repulsive textual annotations — ggrepel functions","text":"","code":"library(ggplot2) g <- dagify(   m ~ x + y,   y ~ x,   exposure = \"x\",   outcome = \"y\",   latent = \"m\",   labels = c(\"x\" = \"Exposure\", \"y\" = \"Outcome\", \"m\" = \"Collider\") )  g |>   tidy_dagitty() |>   ggplot(aes(x = .data$x, y = .data$y, xend = .data$xend, yend = .data$yend)) +   geom_dag_edges() +   geom_dag_point() +   geom_dag_text_repel(aes(label = .data$name), show.legend = FALSE) +   theme_dag()   g |>   tidy_dagitty() |>   dag_label(labels = c(     \"x\" = \"This is the exposure\",     \"y\" = \"Here's the outcome\",     \"m\" = \"Here is where they collide\"   )) |>   ggplot(aes(x = .data$x, y = .data$y, xend = .data$xend, yend = .data$yend)) +   geom_dag_edges() +   geom_dag_point() +   geom_dag_text() +   geom_dag_label_repel(     aes(label = .data$label, fill = .data$label),     col = \"white\",     show.legend = FALSE   ) +   theme_dag()"},{"path":"https://r-causal.github.io/ggdag/reference/scale_adjusted.html","id":null,"dir":"Reference","previous_headings":"","what":"Common scale adjustments for DAGs — scale_adjusted","title":"Common scale adjustments for DAGs — scale_adjusted","text":"scale_adjusted() convenience function implements ways visualizing adjustment variable. convention, square shape used indicate adjustment circle adjusted. Arrows adjusted variables often eliminated de-emphasized, scale_adjusted() uses lower alpha arrows. adjusting collider, dashed line sometimes used demarcate opened pathways, scale_adjusted() whenever geom_dag_collider_edges() used. scale_dag() deprecated favor scale_adjusted().","code":""},{"path":"https://r-causal.github.io/ggdag/reference/scale_adjusted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common scale adjustments for DAGs — scale_adjusted","text":"","code":"scale_adjusted(   include_linetype = TRUE,   include_shape = TRUE,   include_color = TRUE,   include_alpha = FALSE )  scale_dag(breaks = ggplot2::waiver())"},{"path":"https://r-causal.github.io/ggdag/reference/scale_adjusted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common scale adjustments for DAGs — scale_adjusted","text":"include_linetype Logical. Include linetype scale dashed lines collider edges? Default TRUE. include_shape Logical. Include shape scale adjustment status (squares adjusted, circles unadjusted)? Default TRUE. include_color Logical. Include color scale adjustment status? Default TRUE. include_alpha Logical. Include alpha scales de-emphasizing edges adjusted variables? Default FALSE. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output","code":""},{"path":"https://r-causal.github.io/ggdag/reference/simulate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Data from Structural Equation Model — simulate_data","title":"Simulate Data from Structural Equation Model — simulate_data","text":"thin wrapper simulateSEM()function dagitty works tidied dagitty objects. treats input DAG structural equation model, generating random path coefficients simulating corresponding data. See dagitty::simulateSEM() details.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/simulate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Data from Structural Equation Model — simulate_data","text":"","code":"simulate_data(   .tdy_dag,   b.default = NULL,   b.lower = -0.6,   b.upper = 0.6,   eps = 1,   N = 500,   standardized = TRUE )"},{"path":"https://r-causal.github.io/ggdag/reference/simulate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Data from Structural Equation Model — simulate_data","text":".tdy_dag tidy_dagitty dagitty object b.default default path coefficient applied arrows coefficient defined model syntax. b.lower lower bound random path coefficients, applied b.default = NULL. b.upper upper bound path coefficients. eps residual variance (meaningful standardized=FALSE). N number samples generate. standardized whether standardized output desired (variables variance 1).","code":""},{"path":"https://r-causal.github.io/ggdag/reference/simulate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Data from Structural Equation Model — simulate_data","text":"tblwith N values variable .tdy_dag","code":""},{"path":"https://r-causal.github.io/ggdag/reference/simulate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Data from Structural Equation Model — simulate_data","text":"","code":"dagify(y ~ z, x ~ z) |>   tidy_dagitty() |>   simulate_data() #> # A tibble: 500 × 3 #>          x       y       z #>      <dbl>   <dbl>   <dbl> #>  1 -1.25   -1.04    0.739  #>  2  0.653   1.58   -0.231  #>  3 -0.0132  0.929   0.918  #>  4  0.0766  1.65    0.776  #>  5  0.148  -0.191  -0.0107 #>  6  0.713   0.290  -0.747  #>  7  0.496   0.0393 -1.53   #>  8  0.521  -2.18    0.0906 #>  9  0.663   0.556  -0.417  #> 10  1.65    1.86   -0.160  #> # ℹ 490 more rows"},{"path":"https://r-causal.github.io/ggdag/reference/status.html","id":null,"dir":"Reference","previous_headings":"","what":"Find variable status — Variable Status","title":"Find variable status — Variable Status","text":"Detects variable status given DAG (exposure, outcome, latent). See dagitty::VariableStatus() details.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find variable status — Variable Status","text":"","code":"node_status(.dag, as_factor = TRUE, ...)  ggdag_status(   .tdy_dag,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )"},{"path":"https://r-causal.github.io/ggdag/reference/status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find variable status — Variable Status","text":".dag, .tdy_dag input graph, object class tidy_dagitty dagitty as_factor treat status variable factor ... additional arguments passed tidy_dagitty() size numeric value scaling size elements DAG. allows change scale DAG without changing proportions. edge_type type edge, one \"link_arc\", \"link\", \"arc\", \"diagonal\". node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. edge_width width edges. edge_cap size edge caps (distance arrowheads node borders). arrow_length length arrows edges. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? unified_legend logical value. TRUE use_edges use_nodes TRUE, creates unified legend entry showing nodes edges single key, hides separate edge legend. creates cleaner, compact legends. Default TRUE. text bare name column use geom_dag_text(). use_text = TRUE, default use name. label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. node Deprecated. stylized Deprecated.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find variable status — Variable Status","text":"tidy_dagitty status column variable status ggplot","code":""},{"path":"https://r-causal.github.io/ggdag/reference/status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find variable status — Variable Status","text":"node_collider tags variable status ggdag_collider plots variable statuses.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find variable status — Variable Status","text":"","code":"dag <- dagify(   l ~ x + y,   y ~ x,   exposure = \"x\",   outcome = \"y\",   latent = \"l\" )  node_status(dag) #> # DAG: #> # A `dagitty` DAG with: 3 nodes and 3 edges #> # Exposure: x #> # Outcome: y #> # Latent Variable: l #> # #> # Data: #> # A tibble: 4 × 8 #>   name       x      y direction to      xend   yend status   #>   <chr>  <dbl>  <dbl> <fct>     <chr>  <dbl>  <dbl> <fct>    #> 1 l     -0.203  0.439 NA        NA    NA     NA     latent   #> 2 x     -0.338 -0.550 ->        l     -0.203  0.439 exposure #> 3 x     -0.338 -0.550 ->        y      0.586 -0.173 exposure #> 4 y      0.586 -0.173 ->        l     -0.203  0.439 outcome  #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame ggdag_status(dag)"},{"path":"https://r-causal.github.io/ggdag/reference/tbl_df.tidy_dagitty.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a tidy_dagitty object to tbl_df — tbl_df.tidy_dagitty","title":"Convert a tidy_dagitty object to tbl_df — tbl_df.tidy_dagitty","text":"Convert tidy_dagitty object tbl_df","code":""},{"path":"https://r-causal.github.io/ggdag/reference/tbl_df.tidy_dagitty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a tidy_dagitty object to tbl_df — tbl_df.tidy_dagitty","text":"","code":"tbl_df.tidy_dagitty(.tdy_dag)"},{"path":"https://r-causal.github.io/ggdag/reference/tbl_df.tidy_dagitty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a tidy_dagitty object to tbl_df — tbl_df.tidy_dagitty","text":".tdy_dag tidy_dagitty dagitty object","code":""},{"path":"https://r-causal.github.io/ggdag/reference/tbl_sum.tidy_dagitty.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide a succinct summary of a tidy_dagitty object — tbl_sum.tidy_dagitty","title":"Provide a succinct summary of a tidy_dagitty object — tbl_sum.tidy_dagitty","text":"Provide succinct summary tidy_dagitty object","code":""},{"path":"https://r-causal.github.io/ggdag/reference/tbl_sum.tidy_dagitty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide a succinct summary of a tidy_dagitty object — tbl_sum.tidy_dagitty","text":"","code":"# S3 method for class 'tidy_dagitty' tbl_sum(x, ...)"},{"path":"https://r-causal.github.io/ggdag/reference/tbl_sum.tidy_dagitty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide a succinct summary of a tidy_dagitty object — tbl_sum.tidy_dagitty","text":"x object class tidy_dagitty ... Ignored","code":""},{"path":"https://r-causal.github.io/ggdag/reference/tbl_sum.tidy_dagitty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide a succinct summary of a tidy_dagitty object — tbl_sum.tidy_dagitty","text":"named character vector","code":""},{"path":"https://r-causal.github.io/ggdag/reference/theme_dag_blank.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimalist DAG themes — theme_dag_blank","title":"Minimalist DAG themes — theme_dag_blank","text":"Minimalist DAG themes","code":""},{"path":"https://r-causal.github.io/ggdag/reference/theme_dag_blank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimalist DAG themes — theme_dag_blank","text":"","code":"theme_dag_blank(base_size = 12, base_family = \"\", ...)  theme_dag(base_size = 12, base_family = \"\", ...)  theme_dag_grid(base_size = 12, base_family = \"\", ...)"},{"path":"https://r-causal.github.io/ggdag/reference/theme_dag_blank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimalist DAG themes — theme_dag_blank","text":"base_size base font size, given pts. base_family base font family ... additional arguments passed theme()","code":""},{"path":"https://r-causal.github.io/ggdag/reference/theme_dag_blank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimalist DAG themes — theme_dag_blank","text":"","code":"ggdag(m_bias()) + theme_dag_blank() # the default"},{"path":"https://r-causal.github.io/ggdag/reference/theme_dag_grey.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple grey themes for DAGs — theme_dag_grey","title":"Simple grey themes for DAGs — theme_dag_grey","text":"Simple grey themes DAGs","code":""},{"path":"https://r-causal.github.io/ggdag/reference/theme_dag_grey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple grey themes for DAGs — theme_dag_grey","text":"","code":"theme_dag_grey(base_size = 12, base_family = \"\", ...)  theme_dag_gray(base_size = 12, base_family = \"\", ...)  theme_dag_grey_grid(base_size = 12, base_family = \"\", ...)  theme_dag_gray_grid(base_size = 12, base_family = \"\", ...)"},{"path":"https://r-causal.github.io/ggdag/reference/theme_dag_grey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple grey themes for DAGs — theme_dag_grey","text":"base_size base font size, given pts. base_family base font family ... additional arguments passed theme()","code":""},{"path":"https://r-causal.github.io/ggdag/reference/theme_dag_grey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple grey themes for DAGs — theme_dag_grey","text":"","code":"ggdag(m_bias()) + theme_dag_grey()"},{"path":"https://r-causal.github.io/ggdag/reference/tidy_dagitty.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy a dagitty object — tidy_dagitty","title":"Tidy a dagitty object — tidy_dagitty","text":"Tidy dagitty object","code":""},{"path":"https://r-causal.github.io/ggdag/reference/tidy_dagitty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy a dagitty object — tidy_dagitty","text":"","code":"tidy_dagitty(   .dagitty,   seed = NULL,   layout = \"nicely\",   ...,   use_existing_coords = TRUE )"},{"path":"https://r-causal.github.io/ggdag/reference/tidy_dagitty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy a dagitty object — tidy_dagitty","text":".dagitty dagitty seed numeric seed reproducible layout generation layout layout available ggraph. See ggraph::create_layout() details. Alternatively, \"time_ordered\" use time_ordered_coords() algorithmically sort graph time. ... optional arguments passed ggraph::create_layout() use_existing_coords (Advanced). Logical. Use coordinates produced dagitty::coordinates(.dagitty)? coordinates empty, tidy_dagitty() generate layout. Generally, setting FALSE thus useful difference variables coordinates variables DAG, sometimes happens recompiling DAG.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/tidy_dagitty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy a dagitty object — tidy_dagitty","text":"tidy_dagitty object","code":""},{"path":"https://r-causal.github.io/ggdag/reference/tidy_dagitty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy a dagitty object — tidy_dagitty","text":"","code":"library(dagitty) library(ggplot2)  dag <- dagitty(\"dag {   Y <- X <- Z1 <- V -> Z2 -> Y   Z1 <- W1 <-> W2 -> Z2   X <- W1 -> Y   X <- W2 -> Y   X [exposure]   Y [outcome]   }\")  tidy_dagitty(dag) #> # DAG: #> # A `dagitty` DAG with: 7 nodes and 12 edges #> # Exposure: X #> # Outcome: Y #> # #> # Data: #> # A tibble: 13 × 7 #>    name       x     y direction to      xend  yend #>    <chr>  <dbl> <dbl> <fct>     <chr>  <dbl> <dbl> #>  1 V      1.96   3.05 ->        Z1     1.66   1.66 #>  2 V      1.96   3.05 ->        Z2     0.594  3.34 #>  3 W1     0.716  1.52 ->        X      0.179  1.22 #>  4 W1     0.716  1.52 ->        Y     -0.368  2.22 #>  5 W1     0.716  1.52 ->        Z1     1.66   1.66 #>  6 W1     0.716  1.52 <->       W2     0.260  2.37 #>  7 W2     0.260  2.37 ->        X      0.179  1.22 #>  8 W2     0.260  2.37 ->        Y     -0.368  2.22 #>  9 W2     0.260  2.37 ->        Z2     0.594  3.34 #> 10 X      0.179  1.22 ->        Y     -0.368  2.22 #> 11 Y     -0.368  2.22 NA        NA    NA     NA    #> 12 Z1     1.66   1.66 ->        X      0.179  1.22 #> 13 Z2     0.594  3.34 ->        Y     -0.368  2.22 #> # #> # ℹ Use `pull_dag() (`?pull_dag`)` to retrieve the DAG object and `pull_dag_data() (`?pull_dag_data`)` for the data frame  tidy_dagitty(dag, layout = \"fr\") |>   ggplot(aes(x = .data$x, y = .data$y, xend = .data$xend, yend = .data$yend)) +   geom_dag_node() +   geom_dag_text() +   geom_dag_edges() +   theme_dag()"},{"path":"https://r-causal.github.io/ggdag/reference/time_ordered_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a time-ordered coordinate data frame — time_ordered_coords","title":"Create a time-ordered coordinate data frame — time_ordered_coords","text":"time_ordered_coords() helper function create time-ordered DAGs. Pass results coords argument dagify(). .vars specified, coordinates determined automatically. want specific, can also use list data frame. default assume want variables go left right order time. Variables spread along y-axis using simple algorithm stack . can also work along y-axis setting direction = \"y\".","code":""},{"path":"https://r-causal.github.io/ggdag/reference/time_ordered_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a time-ordered coordinate data frame — time_ordered_coords","text":"","code":"time_ordered_coords(   .vars = NULL,   time_points = NULL,   direction = c(\"x\", \"y\"),   auto_sort_direction = c(\"right\", \"left\") )"},{"path":"https://r-causal.github.io/ggdag/reference/time_ordered_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a time-ordered coordinate data frame — time_ordered_coords","text":".vars list character vectors, vector represents single time period. Alternatively, data frame first column variable name second column time period. time_points vector time points. Default NULL, creates sequence 1 number variables. direction character string indicating axis along variables time-ordered. Either \"x\" \"y\". Default \"x\". auto_sort_direction .vars NULL: nodes placed far \"left\" \"right\" graph reasonable. Default right, meaning nodes close possible time descendants.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/time_ordered_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a time-ordered coordinate data frame — time_ordered_coords","text":"tibble three columns: name, x, y.","code":""},{"path":[]},{"path":"https://r-causal.github.io/ggdag/reference/time_ordered_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a time-ordered coordinate data frame — time_ordered_coords","text":"","code":"dagify(   d ~ c1 + c2 + c3,   c1 ~ b1 + b2,   c3 ~ a,   b1 ~ a,   coords = time_ordered_coords() ) |> ggdag()   coords <- time_ordered_coords(list(   # time point 1   \"a\",   # time point 2   c(\"b1\", \"b2\"),   # time point 3   c(\"c1\", \"c2\", \"c3\"),   # time point 4   \"d\" ))  dagify(   d ~ c1 + c2 + c3,   c1 ~ b1 + b2,   c3 ~ a,   b1 ~ a,   coords = coords ) |> ggdag()   # or use a data frame x <- data.frame(   name = c(\"x1\", \"x2\", \"y\", \"z1\", \"z2\", \"z3\", \"a\"),   time = c(1, 1, 2, 3, 3, 3, 4) ) dagify(   z3 ~ y,   y ~ x1 + x2,   a ~ z1 + z2 + z3,   coords = time_ordered_coords(x) ) |>   ggdag()"},{"path":"https://r-causal.github.io/ggdag/reference/variable_family.html","id":null,"dir":"Reference","previous_headings":"","what":"Familial relationships between variables — Assess familial relationships between variables","title":"Familial relationships between variables — Assess familial relationships between variables","text":"Parents children nodes either directly cause caused variable, respectively. Ancestors descendants nodes path descend variable. node_*() functions label variables depending relationship. ggdag_*() functions plot results. See dagitty::children details.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/variable_family.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Familial relationships between variables — Assess familial relationships between variables","text":"","code":"node_children(.tdy_dag, .var, as_factor = TRUE)  node_parents(.tdy_dag, .var, as_factor = TRUE)  node_ancestors(.tdy_dag, .var, as_factor = TRUE)  node_descendants(.tdy_dag, .var, as_factor = TRUE)  node_markov_blanket(.tdy_dag, .var, as_factor = TRUE)  node_adjacent(.tdy_dag, .var, as_factor = TRUE)  ggdag_children(   .tdy_dag,   .var,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )  ggdag_parents(   .tdy_dag,   .var,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )  ggdag_ancestors(   .tdy_dag,   .var,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )  ggdag_descendants(   .tdy_dag,   .var,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )  ggdag_markov_blanket(   .tdy_dag,   .var,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )  ggdag_adjacent(   .tdy_dag,   .var,   ...,   size = 1,   edge_type = c(\"link_arc\", \"link\", \"arc\", \"diagonal\"),   node_size = 16,   text_size = 3.88,   label_size = text_size,   text_col = \"white\",   label_col = \"black\",   edge_width = 0.6,   edge_cap = 8,   arrow_length = 5,   use_edges = TRUE,   use_nodes = TRUE,   use_stylized = FALSE,   use_text = TRUE,   use_labels = FALSE,   unified_legend = TRUE,   text = NULL,   label = NULL,   node = deprecated(),   stylized = deprecated() )"},{"path":"https://r-causal.github.io/ggdag/reference/variable_family.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Familial relationships between variables — Assess familial relationships between variables","text":".tdy_dag tidy_dagitty dagitty object .var character vector, variable assessed (must DAG) as_factor Logical. column factor? ... additional arguments passed tidy_dagitty() size numeric value scaling size elements DAG. allows change scale DAG without changing proportions. edge_type character vector, edge geom use. One : \"link_arc\", accounts directed bidirected edges, \"link\", \"arc\", \"diagonal\" node_size size nodes. text_size size text. label_size size labels. text_col color text. label_col color labels. edge_width width edges. edge_cap size edge caps (distance arrowheads node borders). arrow_length length arrows edges. use_edges logical value. Include geom_dag_edges*() function? TRUE, determined edge_type. use_nodes logical value. Include geom_dag_point()? use_stylized logical value. Include geom_dag_node()? use_text logical value. Include geom_dag_text()? use_labels logical value. Include geom_dag_label_repel()? unified_legend logical value. TRUE use_edges use_nodes TRUE, creates unified legend entry showing nodes edges single key, hides separate edge legend. creates cleaner, compact legends. Default TRUE. text bare name column use geom_dag_text(). use_text = TRUE, default use name. label bare name column use geom_dag_label_repel(). use_labels = TRUE, default use label. node Deprecated. stylized Deprecated.","code":""},{"path":"https://r-causal.github.io/ggdag/reference/variable_family.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Familial relationships between variables — Assess familial relationships between variables","text":"tidy_dagitty column related given relationship variable D relationship ggplot","code":""},{"path":"https://r-causal.github.io/ggdag/reference/variable_family.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Familial relationships between variables — Assess familial relationships between variables","text":"","code":"library(ggplot2) dag <- dagify(   y ~ x + z2 + w2 + w1,   x ~ z1 + w1,   z1 ~ w1 + v,   z2 ~ w2 + v,   w1 ~ ~w2 )  ggdag_children(dag, \"w1\")   dag |>   node_children(\"w1\") |>   ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = children)) +   geom_dag_edges() +   geom_dag_node() +   geom_dag_text(col = \"white\") +   geom_dag_label_repel(aes(label = children, fill = children),                        col = \"white\", show.legend = FALSE) +   theme_dag() +   scale_adjusted(include_color = FALSE) +   scale_color_hue(breaks = c(\"parent\", \"child\"))   ggdag_parents(dag, \"y\")   ggdag_ancestors(dag, \"x\")   ggdag_descendants(dag, \"w1\")   dag |>   node_parents(\"y\") |>   ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +   geom_dag_edges() +   geom_dag_point() +   geom_dag_text(col = \"white\") +   geom_dag_label_repel(aes(label = parent, fill = parent),                        col = \"white\", show.legend = FALSE) +   theme_dag() +   scale_adjusted(include_color = FALSE) +   scale_color_hue(breaks = c(\"parent\", \"child\"))"},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-development-version","dir":"Changelog","previous_headings":"","what":"ggdag (development version)","title":"ggdag (development version)","text":"Added edge_backdoor() function classify edges backdoor paths, direct causal paths, exposure outcome (#137) Enhanced dag_paths() query_paths() include path_type column classifies paths “backdoor” “direct” (#137) Changed default aesthetic ggdag_paths() coloring path status coloring path type (direct vs backdoor), providing informative visualization causal pathways query_adjustment_sets(): Find adjustment sets close backdoor paths query_paths(): Find analyze paths nodes query_instrumental(): Identify instrumental variables query_dseparated()/query_dconnected(): Test d-separation relationships query_colliders(): Identify collider nodes query_exogenous(): Find exogenous variables query_parents(), query_children(), query_ancestors(), query_descendants(): Query node relationships query_markov_blanket(): Find Markov blankets error messages, warnings, informational messages now use cli package better formatting user experience. change adds custom error classes (ggdag_error, ggdag_warning) enable programmatic error handling (#191). Fixed tidy_dagitty() error processing DAGs edges (#159) Fixed dag_paths() error open paths exist nodes (#180) Introduced new functions query_conditional_independence(), test_conditional_independence(), ggdag_conditional_independence() detecting, testing, visualizing implied conditional independencies given DAG dataset (#139) Added sort parameter ggdag_conditional_independence() default TRUE sort conditional independence tests estimates improved readability (#170) Introduced new functions aes_dag() geom_dag() simplify specification ggplot code DAGs. Also refactored quick plots use functions (#121) Added new function geom_label_repel2() opinionated repelled labels often look better DAGs (#132) Improved DAG data structure removing unnecessary circular column needed. column now included using circular layouts. simplifies tidy DAG structure use cases (#119) Edge geoms now support mapping color/colour aesthetics edge_color/edge_colour intuitive usage, matching ggplot2 conventions (#166) Fixed theme_dag() facet labels clipped adding margin strip text (#173) Added quick plot functions causal quartet: quartet_collider(), quartet_confounder(), quartet_mediator(), quartet_m_bias(), quartet_time_collider(), along ggdag_* counterparts. functions create DAGs representing causal quartet D’Agostino McGowan, Gerke, Barrett (2023), demonstrating statistical properties alone determine causal relationships (#171)","code":""},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-0211","dir":"Changelog","previous_headings":"","what":"ggdag 0.2.11","title":"ggdag 0.2.11","text":"CRAN release: 2024-01-24 Internal update address upcoming changes ggplot2 (#125, thanks @teunbrand) Implemented automatic time-ordered coordinates time_ordered_coords() layout (#115) Added geom_dag_label() complement geom_dag_text() repel functions (#116) Added pull_dag() pull_dag_data() extract DAG components, update_dag() update_dag_data() update DAG components, as_tidy_dagitty() construct DAGs data frames (#117). Thanks @lorenzoFabbri inspiring data--dag code #90.","code":""},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-0210","dir":"Changelog","previous_headings":"","what":"ggdag 0.2.10","title":"ggdag 0.2.10","text":"CRAN release: 2023-05-28 Fixed bug ggdag using wrong left_join() interface dplyr 1.1.0 (#110)","code":""},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-029","dir":"Changelog","previous_headings":"","what":"ggdag 0.2.9","title":"ggdag 0.2.9","text":"CRAN release: 2023-05-22 Fixed bugs instrumental functions complex non-existent IVs (#99) Updated URLs new r-causal GitHub repository (#94)","code":""},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-028","dir":"Changelog","previous_headings":"","what":"ggdag 0.2.8","title":"ggdag 0.2.8","text":"CRAN release: 2023-03-17 Added new function time_ordered_coords() calculating time-ordered coordinates (#88) Addressed changes requested CRAN, changes tidyverse (#87, #86, #85)","code":""},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-027","dir":"Changelog","previous_headings":"","what":"ggdag 0.2.7","title":"ggdag 0.2.7","text":"CRAN release: 2022-10-29 Fixed various bugs calculating visualizing paths (#75) Fixed breaking changes upcoming release ggplot2 3.4.0 (#79) size now deprecated geom_dag_collider_edges() favor linewidth, related #79.","code":""},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-026","dir":"Changelog","previous_headings":"","what":"ggdag 0.2.6","title":"ggdag 0.2.6","text":"CRAN release: 2022-08-26 Fixed CRAN errors","code":""},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-025","dir":"Changelog","previous_headings":"","what":"ggdag 0.2.5","title":"ggdag 0.2.5","text":"CRAN release: 2022-07-16 Fixed issue dag_adjustment_sets() width option low extracting adjustment sets directly (#70) Fixed issue tidy_dagitty() missed nodes edges attached. May cause minor breaking changes randomized layouts. (#68) Added limit argument dag_paths, ggdag_paths, ggdag_paths_fan (see dagitty::paths) (#65).","code":""},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-024","dir":"Changelog","previous_headings":"","what":"ggdag 0.2.4","title":"ggdag 0.2.4","text":"CRAN release: 2021-10-10 tidy_dagitty() longer allows dendogram layout type (#62) scale_adjusted() now correctly aligns legend types (#61) ggdag longer loads ggplot2 via Depends, instead importing internally (#57).","code":""},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-023","dir":"Changelog","previous_headings":"","what":"ggdag 0.2.3","title":"ggdag 0.2.3","text":"CRAN release: 2021-01-12 Update vdiffr explicitly conditional (#51) Fixed bug activate_collider_paths() causes error collider high number ancestors (#49) Fixed bug node_equivalent_dags() extra columns get joined new tidy DAG (#40)","code":""},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-022","dir":"Changelog","previous_headings":"","what":"ggdag 0.2.2","title":"ggdag 0.2.2","text":"CRAN release: 2020-02-13 Added vdiffr tests, well basic test file every .R file. (#27) Updated roxygen2 version (#29) Fixed bugs dag_paths() geom_dag_edges_fan() (#31) Removed use use_defaults() ggproto method GeomDAGEdge (#33) Use ggplot2::expansion() instead expand_scale() ggplot2 version least 3.3.0 removed local version expand_scale() (#34)","code":""},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-021","dir":"Changelog","previous_headings":"","what":"ggdag 0.2.1","title":"ggdag 0.2.1","text":"CRAN release: 2019-12-06 Fixed bug ggdag_collider() aesthetics flipped colors labels (issue #15, b72e34b) Used .character.default() directly working characters avoid dispatch error formula.tools package attached (issue #17, 0f32bb4)","code":""},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-020","dir":"Changelog","previous_headings":"","what":"ggdag 0.2.0","title":"ggdag 0.2.0","text":"CRAN release: 2019-09-12 Fixed compatibility issue ggraph 2.0.0 changing strength parameter curved geoms Fixed join bug node_equivalent_class() didn’t account way dagitty returns DAGs direction Fixed join bug node_equivalent_class() didn’t check node Implemented is_false() avoid dependency R 3.5.0 improved edge lengths add {} adjustment set names reflect convention Set nodes unstyled default Changed default themes scales like base ggplot2 Added NEWS.md file track changes package.","code":""},{"path":"https://r-causal.github.io/ggdag/news/index.html","id":"ggdag-010","dir":"Changelog","previous_headings":"","what":"ggdag 0.1.0","title":"ggdag 0.1.0","text":"CRAN release: 2018-03-27 Initial release","code":""}]
